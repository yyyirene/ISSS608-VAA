---
title: "In class Exercise 5"
date: "May 17 2025"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  message: false
  freeze: true
  warning: FALSE
---

[Jsonlite](https://cran.r-project.org/web/packages/jsonlite/jsonlite.pdf)

We will transform the json data into table format

```{r}
pacman::p_load(tidygraph, ggraph, 
               tidyverse, graphlayouts, 
               concaveman, ggforce,SmartEDA,jsonlite)
```

```{r}
kg <- fromJSON("data/MC1_graph.json")

```

Inspect structure

```{r}
str(kg,max.level=1)
```

Extract and Inspect

```{r}
nodes_tbl<-as_tibble(kg$nodes)
edges_tbl<-as_tibble(kg$links)
```

Node type will change to node.type

Initial EDA

```{R}
ggplot(data = edges_tbl,aes(y=`Edge Type`))+
  geom_bar()

```

```{R}
ggplot(data = nodes_tbl,aes(y=`Node Type`))+
  geom_bar()
```

step 1:Mapping from node id to row index

```{r}
id_map <- tibble(id=nodes_tbl$id,
                 index = seq_len(
                   nrow(nodes_tbl)
                 ))
```

This ensure each id from your node list is mapped to the correct row number.

step 2:Map source and target IDS to row indices

```{r}
edges_tbl <- edges_tbl %>%
  left_join(id_map, by = c("source" = "id")) %>%
  rename(from = index ) %>% 
  left_join(id_map, by = c ("target"= "id")) %>% 
  rename(to = index )
```

step 3 ：filter out any unmatched (invalid) edges

```{r}
edges_tbl<-edges_tbl %>% 
  filter(!is.na(from), !is.na(to))
```

step 4:creating the graph

```{r}
graph <- tbl_graph( nodes = nodes_tbl,
                    edges = edges_tbl,
                    directed = kg$directed)
graph
```

Here is truth

Visualising the knowledge graph

Once have this ,will get back the same graph.

```{r}
set.seed(1234)
```

```{r}
#| eval: false
ggraph(graph,layout= "fr") +
  geom_edge_link(alpha = 0.3,
                 colour ="gray") +
  geom_node_point(aes(color = `Node Type`),
                  size = 4) +
   geom_node_text(aes(label = name),
                  repel = TRUE,
                  size = 2.5) +
    theme_void()
  
```

it is not usual to visual

Step 1 : Filter edges to only "Memberor"

```{r}
graph_memberof <- graph %>%
  activate(edges) %>%
  filter(`Edge Type`== "MemberOf")
```

no link but still here

Step 2 ：Extract only connected nodes

(i,e., used in the these edges)

delete the often nodes

```{r}
uesed_node_indices <- graph_memberof %>%
  activate(edges) %>%
  as_tibble() %>%
  select(from , to )  %>%
  unlist () %>%
  unique()
```

Step 3

```{R}
graph_memberof <-  graph_memberof %>%
  activate(nodes) %>%
  mutate(row_id = row_number()) %>%
  filter(row_id %in% uesed_node_indices) %>%
  select(-row_id)
```

need time to invest

```{R}
ggraph(graph_memberof, layout = "fr") +
  geom_edge_link(alpha = 0.5, 
                 colour = "gray") +
  geom_node_point(aes(color = `Node Type`), 
                  size = 1) +
  geom_node_text(aes(label = name), 
                 repel = TRUE, 
                 size = 2.5) +
  theme_void()
```
