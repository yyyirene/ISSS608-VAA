[
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html",
    "title": "In class Exercise 5",
    "section": "",
    "text": "Jsonlite\nWe will transform the json data into table format\n\npacman::p_load(tidygraph, ggraph, \n               tidyverse, graphlayouts, \n               concaveman, ggforce,SmartEDA,jsonlite)\n\n\nkg &lt;- fromJSON(\"data/MC1_graph.json\")\n\nInspect structure\n\nstr(kg,max.level=1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\nExtract and Inspect\n\nnodes_tbl&lt;-as_tibble(kg$nodes)\nedges_tbl&lt;-as_tibble(kg$links)\n\nNode type will change to node.type\nInitial EDA\n\nggplot(data = edges_tbl,aes(y=`Edge Type`))+\n  geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data = nodes_tbl,aes(y=`Node Type`))+\n  geom_bar()\n\n\n\n\n\n\n\n\nstep 1:Mapping from node id to row index\n\nid_map &lt;- tibble(id=nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)\n                 ))\n\nThis ensure each id from your node list is mapped to the correct row number.\nstep 2:Map source and target IDS to row indices\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index ) %&gt;% \n  left_join(id_map, by = c (\"target\"= \"id\")) %&gt;% \n  rename(to = index )\n\nstep 3 ：filter out any unmatched (invalid) edges\n\nedges_tbl&lt;-edges_tbl %&gt;% \n  filter(!is.na(from), !is.na(to))\n\nstep 4:creating the graph\n\ngraph &lt;- tbl_graph( nodes = nodes_tbl,\n                    edges = edges_tbl,\n                    directed = kg$directed)\ngraph\n\n# A tbl_graph: 17412 nodes and 37857 edges\n#\n# A directed multigraph with 16 components\n#\n# Node Data: 17,412 × 10 (active)\n   `Node Type` name         single release_date genre notable    id written_date\n   &lt;chr&gt;       &lt;chr&gt;        &lt;lgl&gt;  &lt;chr&gt;        &lt;chr&gt; &lt;lgl&gt;   &lt;int&gt; &lt;chr&gt;       \n 1 Song        Breaking Th… TRUE   2017         Ocea… TRUE        0 &lt;NA&gt;        \n 2 Person      Carlos Duffy NA     &lt;NA&gt;         &lt;NA&gt;  NA          1 &lt;NA&gt;        \n 3 Person      Min Qin      NA     &lt;NA&gt;         &lt;NA&gt;  NA          2 &lt;NA&gt;        \n 4 Person      Xiuying Xie  NA     &lt;NA&gt;         &lt;NA&gt;  NA          3 &lt;NA&gt;        \n 5 RecordLabel Nautical Mi… NA     &lt;NA&gt;         &lt;NA&gt;  NA          4 &lt;NA&gt;        \n 6 Song        Unshackled … FALSE  2026         Lo-F… TRUE        5 &lt;NA&gt;        \n 7 Person      Luke Payne   NA     &lt;NA&gt;         &lt;NA&gt;  NA          6 &lt;NA&gt;        \n 8 Person      Xiulan Zeng  NA     &lt;NA&gt;         &lt;NA&gt;  NA          7 &lt;NA&gt;        \n 9 Person      David Frank… NA     &lt;NA&gt;         &lt;NA&gt;  NA          8 &lt;NA&gt;        \n10 RecordLabel Colline-Cas… NA     &lt;NA&gt;         &lt;NA&gt;  NA          9 &lt;NA&gt;        \n# ℹ 17,402 more rows\n# ℹ 2 more variables: stage_name &lt;chr&gt;, notoriety_date &lt;chr&gt;\n#\n# Edge Data: 37,857 × 6\n   from    to `Edge Type`      source target   key\n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;             &lt;int&gt;  &lt;int&gt; &lt;int&gt;\n1     1  1842 InterpolatesFrom      0   1841     0\n2     1     5 RecordedBy            0      4     0\n3     2     1 PerformerOf           1      0     0\n# ℹ 37,854 more rows\n\n\nHere is truth\nVisualising the knowledge graph\nOnce have this ,will get back the same graph.\n\nset.seed(1234)\n\n\nggraph(graph,layout= \"fr\") +\n  geom_edge_link(alpha = 0.3,\n                 colour =\"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n   geom_node_text(aes(label = name),\n                  repel = TRUE,\n                  size = 2.5) +\n    theme_void()\n\nit is not usual to visual\nStep 1 : Filter edges to only “Memberor”\n\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type`== \"MemberOf\")\n\nno link but still here\nStep 2 ：Extract only connected nodes\n(i,e., used in the these edges)\ndelete the often nodes\n\nuesed_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from , to )  %&gt;%\n  unlist () %&gt;%\n  unique()\n\nStep 3\n\ngraph_memberof &lt;-  graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% uesed_node_indices) %&gt;%\n  select(-row_id)\n\nneed time to invest\n\nggraph(graph_memberof, layout = \"fr\") +\n  geom_edge_link(alpha = 0.5, \n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`), \n                  size = 1) +\n  geom_node_text(aes(label = name), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "In this chapter, we will learn the basic principles and essential components of ggplot2. At the same time, we will gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By then end of this chapter we will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk on the right assumes that you already have pacman package installed. If not, please go ahead install pacman first.\n\n\n\npacman::p_load(tidyverse,ggplot2,dplyr,qcc)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\n\n\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nAs you can see that the code chunk is relatively simple if R Graphics is used.\n\n\n\n\n\n\nTip\n\n\n\nKey Advantages of ggplot2 for Beginners: As pointed out by Hadley Wickham\n\nAutomatic Legends:\n\nggplot2 automatically generates legends based on aesthetics, saving beginners from manually coding them (as required in base R).\nEasy Faceting:\n\nggplot2 simplifies the creation of subplots using facet_wrap() or facet_grid(), whereas base R requires complex loops and layout setup.\nEncourages Tidy Data:\n\nWorking with ggplot2 promotes the use of tidy data, which aligns with good practices in R and integrates well with tools like dplyr and lm().\nBetter Visuals by Default:\n\nggplot2 produces cleaner, more visually appealing plots with minimal effort, making it more accessible for beginners.\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.\n\n\n\n\n\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\n\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.\n\n\n\n\n\nLet us call the ggplot() function using the code chunk on the right.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify()\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nggplot includes the x-axis and the axis’s label.\n\n\n\n\n\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\n\n\n\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\n\n\n\n\n::: Be warned The y scale is not very useful, in fact it is very misleading. :::\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\nNote that the default bin is 30.\n\n\n\n\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n1.7.6 Geometric Objects: geom-density()\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\n\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\n\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n\ngeom_point() is especially useful for creating scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nThe default method used is loess.\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale\n\n\n\n\n\nSingapore2017 &lt;- read_csv(\"data/Singapore-2017.csv\")\n\nRows: 21 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Age\ndbl (2): M, F\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\nShow the code\ndf_long &lt;- Singapore2017 %&gt;%\n  pivot_longer(cols = c(\"M\", \"F\"), names_to = \"Gender\", values_to = \"Count\") %&gt;%\n  mutate(Gender = recode(Gender, \"M\" = \"Male\", \"F\" = \"Female\"))\n\ntotal_population &lt;- sum(df_long$Count)\n\ndf_long &lt;- df_long %&gt;%\n  mutate(Percent = Count / total_population * 100,\n         Percent = ifelse(Gender == \"Male\", -Percent, Percent))\n\ndf_long$Age &lt;- factor(df_long$Age,\n                      levels = unique(Singapore2017$Age)) \n\nggplot(df_long, aes(x = Age, y = Percent, fill = Gender)) +\n  geom_bar(stat = \"identity\", width = 0.9) +\n  coord_flip() +\n  scale_y_continuous(labels = function(x) paste0(abs(x), \"%\")) +\n  scale_fill_manual(values = c(\"Male\" = \"steelblue\", \"Female\" = \"lightcoral\")) +\n  labs(title = \"Singapore Population Pyramid (2017)\",\n       x = \"Age Group\", y = \"Population (%)\") +\n  theme_minimal() +\n  theme(legend.position = \"top\",\n        plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ndefects &lt;- c(\n  shrink = 67,\n  porosity = 13,\n  weld_LOF = 9,\n  shell_inclusion = 6,\n  hard_alpha_inclusion = 3,\n  tungsten_inclusion = 1\n)\n\ndf &lt;- data.frame(\n  defect = names(defects),\n  freq = as.numeric(defects)\n) %&gt;%\n  arrange(desc(freq)) %&gt;%\n  mutate(\n    cum_freq = cumsum(freq),\n    cum_percent = cum_freq / sum(freq) * 100,\n    defect = factor(defect, levels = defect)  # 控制 x 轴顺序\n  )\n\n\nggplot(df, aes(x = defect, y = freq)) +\n  geom_col(fill = \"tomato\") +\n  geom_line(aes(y = cum_percent * max(freq) / 100), group = 1, color = \"steelblue\", size = 1) +\n  geom_point(aes(y = cum_percent * max(freq) / 100), color = \"steelblue\", size = 2) +\n  scale_y_continuous(\n    name = \"Defect Frequency\",\n    sec.axis = sec_axis(~ . * 100 / max(df$freq), name = \"Cumulative Percentage (%)\")\n  ) +\n  labs(\n    title = \"Pareto Chart of Titanium Defects\",\n    x = \"Defect Type\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.title.y.right = element_text(color = \"steelblue\"),\n    axis.text.x = element_text(angle = 45, hjust = 1)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nexam_long &lt;- exam_data %&gt;%\n  pivot_longer(cols = c(ENGLISH, MATHS, SCIENCE),\n               names_to = \"Subject\",\n               values_to = \"Score\")\n\nggplot(exam_long, aes(x = Score, fill = Subject)) +\n  geom_histogram(bins = 20, color = \"black\", alpha = 0.7) +\n  facet_wrap(~ Subject, scales = \"free\") +\n  labs(title = \"Trellis Display: Score Distribution by Subject\") +\n  theme_minimal()",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcome",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "In this chapter, we will learn the basic principles and essential components of ggplot2. At the same time, we will gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By then end of this chapter we will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics.",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Note\n\n\n\nThe code chunk on the right assumes that you already have pacman package installed. If not, please go ahead install pacman first.\n\n\n\npacman::p_load(tidyverse,ggplot2,dplyr,qcc)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "R Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nAs you can see that the code chunk is relatively simple if R Graphics is used.\n\n\n\n\n\n\nTip\n\n\n\nKey Advantages of ggplot2 for Beginners: As pointed out by Hadley Wickham\n\nAutomatic Legends:\n\nggplot2 automatically generates legends based on aesthetics, saving beginners from manually coding them (as required in base R).\nEasy Faceting:\n\nggplot2 simplifies the creation of subplots using facet_wrap() or facet_grid(), whereas base R requires complex loops and layout setup.\nEncourages Tidy Data:\n\nWorking with ggplot2 promotes the use of tidy data, which aligns with good practices in R and integrates well with tools like dplyr and lm().\nBetter Visuals by Default:\n\nggplot2 produces cleaner, more visually appealing plots with minimal effort, making it more accessible for beginners.\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "There are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\n\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Let us call the ggplot() function using the code chunk on the right.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify()",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#aesthetic-mappings",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "ggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nggplot includes the x-axis and the axis’s label.",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Geometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\n\n\n\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\n\n\n\n\n::: Be warned The y scale is not very useful, in fact it is very misleading. :::\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\nNote that the default bin is 30.\n\n\n\n\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n1.7.6 Geometric Objects: geom-density()\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\n\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\n\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n\ngeom_point() is especially useful for creating scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "ggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nThe default method used is loess.\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "ggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "ggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "ggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Hadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#statistical-graphics-methods-week-1",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#statistical-graphics-methods-week-1",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Singapore2017 &lt;- read_csv(\"data/Singapore-2017.csv\")\n\nRows: 21 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Age\ndbl (2): M, F\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\nShow the code\ndf_long &lt;- Singapore2017 %&gt;%\n  pivot_longer(cols = c(\"M\", \"F\"), names_to = \"Gender\", values_to = \"Count\") %&gt;%\n  mutate(Gender = recode(Gender, \"M\" = \"Male\", \"F\" = \"Female\"))\n\ntotal_population &lt;- sum(df_long$Count)\n\ndf_long &lt;- df_long %&gt;%\n  mutate(Percent = Count / total_population * 100,\n         Percent = ifelse(Gender == \"Male\", -Percent, Percent))\n\ndf_long$Age &lt;- factor(df_long$Age,\n                      levels = unique(Singapore2017$Age)) \n\nggplot(df_long, aes(x = Age, y = Percent, fill = Gender)) +\n  geom_bar(stat = \"identity\", width = 0.9) +\n  coord_flip() +\n  scale_y_continuous(labels = function(x) paste0(abs(x), \"%\")) +\n  scale_fill_manual(values = c(\"Male\" = \"steelblue\", \"Female\" = \"lightcoral\")) +\n  labs(title = \"Singapore Population Pyramid (2017)\",\n       x = \"Age Group\", y = \"Population (%)\") +\n  theme_minimal() +\n  theme(legend.position = \"top\",\n        plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ndefects &lt;- c(\n  shrink = 67,\n  porosity = 13,\n  weld_LOF = 9,\n  shell_inclusion = 6,\n  hard_alpha_inclusion = 3,\n  tungsten_inclusion = 1\n)\n\ndf &lt;- data.frame(\n  defect = names(defects),\n  freq = as.numeric(defects)\n) %&gt;%\n  arrange(desc(freq)) %&gt;%\n  mutate(\n    cum_freq = cumsum(freq),\n    cum_percent = cum_freq / sum(freq) * 100,\n    defect = factor(defect, levels = defect)  # 控制 x 轴顺序\n  )\n\n\nggplot(df, aes(x = defect, y = freq)) +\n  geom_col(fill = \"tomato\") +\n  geom_line(aes(y = cum_percent * max(freq) / 100), group = 1, color = \"steelblue\", size = 1) +\n  geom_point(aes(y = cum_percent * max(freq) / 100), color = \"steelblue\", size = 2) +\n  scale_y_continuous(\n    name = \"Defect Frequency\",\n    sec.axis = sec_axis(~ . * 100 / max(df$freq), name = \"Cumulative Percentage (%)\")\n  ) +\n  labs(\n    title = \"Pareto Chart of Titanium Defects\",\n    x = \"Defect Type\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.title.y.right = element_text(color = \"steelblue\"),\n    axis.text.x = element_text(angle = 45, hjust = 1)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nexam_long &lt;- exam_data %&gt;%\n  pivot_longer(cols = c(ENGLISH, MATHS, SCIENCE),\n               names_to = \"Subject\",\n               values_to = \"Score\")\n\nggplot(exam_long, aes(x = Score, fill = Subject)) +\n  geom_histogram(bins = 20, color = \"black\", alpha = 0.7) +\n  facet_wrap(~ Subject, scales = \"free\") +\n  labs(title = \"Trellis Display: Score Distribution by Subject\") +\n  theme_minimal()",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands-on Exercise5",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to model, analyse and visualise network data using R.\nBy the end of this hands-on exercise, we will be able to:\n\ncreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\nbuild network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\nbuild advanced graph visualisation by incorporating the network geometrics, and\nbuild interactive network visualisation using visNetwork package.\n\n\n\n\nIn this hands-on exercise, four network data modelling and visualisation packages will be installed and launched. They are igraph, tidygraph, ggraph and visNetwork. Beside these four packages, tidyverse and lubridate, an R package specially designed to handle and wrangling time data will be installed and launched too.\n\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce)\n\n\n\n\nThe data sets used in this hands-on exercise is from an oil exploration and extraction company. There are two data sets. One contains the nodes data and the other contains the edges (also know as link) data.\n\n\n\n\n\n\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\n\n\n\n\n\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\n\n\n\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe output report of GAStech_edges above reveals that the SentDate is treated as “Character” data type instead of date data type. This is an error! Before we continue, it is important for us to change the data type of SentDate field back to “Date”” data type.\n\n\n\n\n\n\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nboth dmy() and wday() are functions of lubridate package. lubridate is an R package that makes it easier to work with dates and times.\ndmy() transforms the SentDate to Date data type.\nwday() returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the daya spells in full, i.e. Monday. The function will create a new column in the data.frame i.e. Weekday and the output of wday() will save in this newly created field.\nthe values in the Weekday field are in ordinal scale.\n\n\n\n\n\n\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\n#GAStech_edgess &lt;- read_csv(\"data/GAStech_email_edge.csv\")\n\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 10\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    &lt;date&gt; 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     &lt;ord&gt; Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…\n\n\n\n\n\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.\nIn view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nfour functions from dplyr package are used. They are: filter(), group(), summarise(), and ungroup().\nThe output data.frame is called GAStech_edges_aggregated.\nA new field called Weight has been added in GAStech_edges_aggregated.\n\n\n\n\n\n\n\nglimpse(GAStech_edges_aggregated)\n\nRows: 1,372\nColumns: 4\n$ source  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  &lt;dbl&gt; 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday &lt;ord&gt; Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  &lt;int&gt; 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…\n\n\n\n\n\n\nIn this section, we will learn how to create a graph data model by using tidygraph package. It provides a tidy API for graph/network manipulation. While network data itself is not tidy, it can be envisioned as two tidy tables, one for node data and one for edge data. tidygraph provides a way to switch between the two tables and provides dplyr verbs for manipulating them. Furthermore it provides access to a lot of graph algorithms with return values that facilitate their use in a tidy workflow.\n\n\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network. Below are network data and objects supported by as_tbl_graph()\n\na node data.frame and an edge data.frame,\ndata.frame, list, matrix from base,\nigraph from igraph,\nnetwork from network,\ndendrogram and hclust from stats,\nNode from data.tree,\nphylo and evonet from ape, and\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor).\n\n\n\n\n\n\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n\n\n\nIn the above the .N() function is used to gain access to the node data while manipulating the edge data. Similarly .E() will give you the edge data and .G() will give you the tbl_graph object itself.\n\n\n\n\nIn this section, we will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.\nBefore typing the codes, we are recommended to review to reference guide of tbl_graph()\n\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n\n\n\n\nGAStech_graph\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\n\n\n\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges.\nThe command also prints the first six rows of “Node Data” and the first three of “Edge Data”.\nIt states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time.\n\n\n\n\nThe nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\n\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   &lt;int&gt; &lt;int&gt; &lt;ord&gt;      &lt;int&gt;\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows\n\n\nVisit the reference guide of activate() to find out more about the function.\n\n\n\n\nggraph is an extension of ggplot2, making it easier to carry over basic ggplot skills to the design of network graphs.\nAs in all network graph, there are three main aspects to a ggraph’s network graph, they are:\n\nnodes,\nedges and\nlayouts.\n\nFor a comprehensive discussion of each of this aspect of graph, please refer to their respective vignettes provided.\n\n\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph. Before your get started, it is advisable to read their respective reference guide at least once.\n\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object.\n\n\n\n\n\n\nIn this section, you will use theme_graph() to remove the x and y axes. Before your get started, it is advisable to read it’s reference guide at least once.\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\nThe ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots.\n\n\n\n\n\n\nFurthermore, theme_graph() makes it easy to change the coloring of the plot.\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')\n\n\n\n\n\n\n\n\n\n\n\nggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph().\n\n\n\n\n\nThe code chunks below will be used to plot the network graph using Fruchterman and Reingold layout.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\nlayout argument is used to define the layout to be used.\n\n\n\n\nIn this section, you will colour each node by referring to their respective departments.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\n\nThings to learn from the code chunks above:\n\ngeom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chnuks above colour and size are used.\n\n\n\n\nIn the code chunk below, the thickness of the edges will be mapped with the Weight variable.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\nThings to learn from the code chunks above:\n\ngeom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line.\n\n\n\n\n\nAnother very useful feature of ggraph is faceting. In visualising network data, this technique can be used to reduce edge over-plotting in a very meaning way by spreading nodes and edges out based on their attributes. In this section, you will learn how to use faceting technique to visualise network data.\nThere are three functions in ggraph to implement faceting, they are:\n\nfacet_nodes() whereby edges are only draw in a panel if both terminal nodes are present here,\nfacet_edges() whereby nodes are always drawn in al panels even if the node data contains an attribute named the same as the one used for the edge facetting, and\nfacet_graph() faceting on two variables simultaneously.\n\n\n\nIn the code chunk below, facet_edges() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\n\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\n\n\nset_graph_style() \n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n\n\n\n\n\n\n\n\n\n\n\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n\n\n\n\n\n\n\n\n\n\n\ntidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it. Use this link to find out more about community detection functions provided by tidygraph,\nIn the code chunk below group_edge_betweenness() is used.\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(community = as.factor(\n    group_edge_betweenness(\n      weights = Weight, \n      directed = TRUE))) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(\n    aes(\n      width=Weight), \n    alpha=0.2) +\n  scale_edge_width(\n    range = c(0.1, 5)) +\n  geom_node_point(\n    aes(colour = community))  \n\ng + theme_graph()\n\n\n\n\n\n\n\n\nIn order to support effective visual investigation, the community network above has been revised by using geom_mark_hull() of ggforce package.\n\n\n\n\n\n\nImportant\n\n\n\nPlease be reminded that you must to install and include ggforce and concaveman packages before running the code chunk below.\n\n\n\ng &lt;- GAStech_graph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(community = as.factor(\n    group_optimal(weights = Weight)),\n         betweenness_measure = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") +\n  geom_mark_hull(\n    aes(x, y, \n        group = community, \n        fill = community),  \n    alpha = 0.2,  \n    expand = unit(0.3, \"cm\"),  # Expand\n    radius = unit(0.3, \"cm\")  # Smoothness\n  ) + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(fill = Department,\n                      size = betweenness_measure),\n                      color = \"black\",\n                      shape = 21)\n  \ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\nvisNetwork() is a R package for network visualization, using vis.js javascript library.\nvisNetwork() function uses a nodes list and edges list to create an interactive graph.\n\nThe nodes list must include an “id” column, and the edge list must have “from” and “to” columns.\nThe function also plots the labels for the nodes, using the names of the actors from the “label” column in the node list.\n\nThe resulting graph is fun to play around with.\n\nYou can move the nodes and the graph will use an algorithm to keep the nodes properly spaced.\nYou can also zoom in and out on the plot and move it around to re-center it.\n\n\n\n\nBefore we can plot the interactive network graph, we need to prepare the data model by using the code chunk below.\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\nThe code chunk below will be used to plot an interactive network graph by using the data prepared.\n\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)\n\n\n\n\nIn the code chunk below, Fruchterman and Reingold layout is used.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") \n\n\n\n\n\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_in_circle\") %&gt;%\nvisOptions(highlightNearest = list(enabled = T, hover = T), \n             nodesIdSelection = T)\n\n\n\n\n\n\n\n\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.\nThe code chunk below rename Department field to group.\n\nGAStech_nodes &lt;- GAStech_nodes %&gt;%\n  rename(group = Department) \n\nWhen we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\nIn the code run below visEdges() is used to symbolise the edges.\n- The argument arrows is used to define where to place the arrow.\n- The smooth argument is used to plot the edges using a smooth curve.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\nIn the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation.\n\nThe argument highlightNearest highlights nearest when clicking a node.\nThe argument nodesIdSelection adds an id node selection creating an HTML select element.\n\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\nAdding one more select by group.\n\nvisNetwork(GAStech_nodes, GAStech_edges_aggregated, \n           height = \"700px\", width = \"100%\") %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%   \n  visOptions(\n    selectedBy = \"group\",                       \n    highlightNearest = TRUE,\n    nodesIdSelection = TRUE\n  ) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\nAdding Data Manipulation\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123) %&gt;% \n  visOptions(manipulation = TRUE)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 5"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#overview",
    "title": "Hands-on Exercise5",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to model, analyse and visualise network data using R.\nBy the end of this hands-on exercise, we will be able to:\n\ncreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\nbuild network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\nbuild advanced graph visualisation by incorporating the network geometrics, and\nbuild interactive network visualisation using visNetwork package.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 5"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#getting-started",
    "title": "Hands-on Exercise5",
    "section": "",
    "text": "In this hands-on exercise, four network data modelling and visualisation packages will be installed and launched. They are igraph, tidygraph, ggraph and visNetwork. Beside these four packages, tidyverse and lubridate, an R package specially designed to handle and wrangling time data will be installed and launched too.\n\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 5"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-data",
    "title": "Hands-on Exercise5",
    "section": "",
    "text": "The data sets used in this hands-on exercise is from an oil exploration and extraction company. There are two data sets. One contains the nodes data and the other contains the edges (also know as link) data.\n\n\n\n\n\n\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\n\n\n\n\n\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\n\n\n\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe output report of GAStech_edges above reveals that the SentDate is treated as “Character” data type instead of date data type. This is an error! Before we continue, it is important for us to change the data type of SentDate field back to “Date”” data type.\n\n\n\n\n\n\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nboth dmy() and wday() are functions of lubridate package. lubridate is an R package that makes it easier to work with dates and times.\ndmy() transforms the SentDate to Date data type.\nwday() returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the daya spells in full, i.e. Monday. The function will create a new column in the data.frame i.e. Weekday and the output of wday() will save in this newly created field.\nthe values in the Weekday field are in ordinal scale.\n\n\n\n\n\n\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\n#GAStech_edgess &lt;- read_csv(\"data/GAStech_email_edge.csv\")\n\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 10\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    &lt;date&gt; 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     &lt;ord&gt; Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…\n\n\n\n\n\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.\nIn view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nfour functions from dplyr package are used. They are: filter(), group(), summarise(), and ungroup().\nThe output data.frame is called GAStech_edges_aggregated.\nA new field called Weight has been added in GAStech_edges_aggregated.\n\n\n\n\n\n\n\nglimpse(GAStech_edges_aggregated)\n\nRows: 1,372\nColumns: 4\n$ source  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  &lt;dbl&gt; 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday &lt;ord&gt; Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  &lt;int&gt; 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 5"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#creating-network-objects-using-tidygraph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#creating-network-objects-using-tidygraph",
    "title": "Hands-on Exercise5",
    "section": "",
    "text": "In this section, we will learn how to create a graph data model by using tidygraph package. It provides a tidy API for graph/network manipulation. While network data itself is not tidy, it can be envisioned as two tidy tables, one for node data and one for edge data. tidygraph provides a way to switch between the two tables and provides dplyr verbs for manipulating them. Furthermore it provides access to a lot of graph algorithms with return values that facilitate their use in a tidy workflow.\n\n\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network. Below are network data and objects supported by as_tbl_graph()\n\na node data.frame and an edge data.frame,\ndata.frame, list, matrix from base,\nigraph from igraph,\nnetwork from network,\ndendrogram and hclust from stats,\nNode from data.tree,\nphylo and evonet from ape, and\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor).\n\n\n\n\n\n\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n\n\n\nIn the above the .N() function is used to gain access to the node data while manipulating the edge data. Similarly .E() will give you the edge data and .G() will give you the tbl_graph object itself.\n\n\n\n\nIn this section, we will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.\nBefore typing the codes, we are recommended to review to reference guide of tbl_graph()\n\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n\n\n\n\nGAStech_graph\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\n\n\n\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges.\nThe command also prints the first six rows of “Node Data” and the first three of “Edge Data”.\nIt states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time.\n\n\n\n\nThe nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\n\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   &lt;int&gt; &lt;int&gt; &lt;ord&gt;      &lt;int&gt;\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows\n\n\nVisit the reference guide of activate() to find out more about the function.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 5"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-static-network-graphs-with-ggraph-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-static-network-graphs-with-ggraph-package",
    "title": "Hands-on Exercise5",
    "section": "",
    "text": "ggraph is an extension of ggplot2, making it easier to carry over basic ggplot skills to the design of network graphs.\nAs in all network graph, there are three main aspects to a ggraph’s network graph, they are:\n\nnodes,\nedges and\nlayouts.\n\nFor a comprehensive discussion of each of this aspect of graph, please refer to their respective vignettes provided.\n\n\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph. Before your get started, it is advisable to read their respective reference guide at least once.\n\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object.\n\n\n\n\n\n\nIn this section, you will use theme_graph() to remove the x and y axes. Before your get started, it is advisable to read it’s reference guide at least once.\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\nThe ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots.\n\n\n\n\n\n\nFurthermore, theme_graph() makes it easy to change the coloring of the plot.\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')\n\n\n\n\n\n\n\n\n\n\n\nggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph().\n\n\n\n\n\nThe code chunks below will be used to plot the network graph using Fruchterman and Reingold layout.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\nlayout argument is used to define the layout to be used.\n\n\n\n\nIn this section, you will colour each node by referring to their respective departments.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\n\nThings to learn from the code chunks above:\n\ngeom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chnuks above colour and size are used.\n\n\n\n\nIn the code chunk below, the thickness of the edges will be mapped with the Weight variable.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\nThings to learn from the code chunks above:\n\ngeom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 5"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#creating-facet-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#creating-facet-graphs",
    "title": "Hands-on Exercise5",
    "section": "",
    "text": "Another very useful feature of ggraph is faceting. In visualising network data, this technique can be used to reduce edge over-plotting in a very meaning way by spreading nodes and edges out based on their attributes. In this section, you will learn how to use faceting technique to visualise network data.\nThere are three functions in ggraph to implement faceting, they are:\n\nfacet_nodes() whereby edges are only draw in a panel if both terminal nodes are present here,\nfacet_edges() whereby nodes are always drawn in al panels even if the node data contains an attribute named the same as the one used for the edge facetting, and\nfacet_graph() faceting on two variables simultaneously.\n\n\n\nIn the code chunk below, facet_edges() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\n\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\n\n\nset_graph_style() \n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n\n\n\n\n\n\n\n\n\n\n\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n\n\n\n\n\n\n\n\n\n\n\ntidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it. Use this link to find out more about community detection functions provided by tidygraph,\nIn the code chunk below group_edge_betweenness() is used.\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(community = as.factor(\n    group_edge_betweenness(\n      weights = Weight, \n      directed = TRUE))) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(\n    aes(\n      width=Weight), \n    alpha=0.2) +\n  scale_edge_width(\n    range = c(0.1, 5)) +\n  geom_node_point(\n    aes(colour = community))  \n\ng + theme_graph()\n\n\n\n\n\n\n\n\nIn order to support effective visual investigation, the community network above has been revised by using geom_mark_hull() of ggforce package.\n\n\n\n\n\n\nImportant\n\n\n\nPlease be reminded that you must to install and include ggforce and concaveman packages before running the code chunk below.\n\n\n\ng &lt;- GAStech_graph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(community = as.factor(\n    group_optimal(weights = Weight)),\n         betweenness_measure = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") +\n  geom_mark_hull(\n    aes(x, y, \n        group = community, \n        fill = community),  \n    alpha = 0.2,  \n    expand = unit(0.3, \"cm\"),  # Expand\n    radius = unit(0.3, \"cm\")  # Smoothness\n  ) + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(fill = Department,\n                      size = betweenness_measure),\n                      color = \"black\",\n                      shape = 21)\n  \ng + theme_graph()",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 5"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#building-interactive-network-graph-with-visnetwork",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#building-interactive-network-graph-with-visnetwork",
    "title": "Hands-on Exercise5",
    "section": "",
    "text": "visNetwork() is a R package for network visualization, using vis.js javascript library.\nvisNetwork() function uses a nodes list and edges list to create an interactive graph.\n\nThe nodes list must include an “id” column, and the edge list must have “from” and “to” columns.\nThe function also plots the labels for the nodes, using the names of the actors from the “label” column in the node list.\n\nThe resulting graph is fun to play around with.\n\nYou can move the nodes and the graph will use an algorithm to keep the nodes properly spaced.\nYou can also zoom in and out on the plot and move it around to re-center it.\n\n\n\n\nBefore we can plot the interactive network graph, we need to prepare the data model by using the code chunk below.\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\nThe code chunk below will be used to plot an interactive network graph by using the data prepared.\n\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)\n\n\n\n\nIn the code chunk below, Fruchterman and Reingold layout is used.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") \n\n\n\n\n\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_in_circle\") %&gt;%\nvisOptions(highlightNearest = list(enabled = T, hover = T), \n             nodesIdSelection = T)\n\n\n\n\n\n\n\n\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.\nThe code chunk below rename Department field to group.\n\nGAStech_nodes &lt;- GAStech_nodes %&gt;%\n  rename(group = Department) \n\nWhen we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\nIn the code run below visEdges() is used to symbolise the edges.\n- The argument arrows is used to define where to place the arrow.\n- The smooth argument is used to plot the edges using a smooth curve.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\nIn the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation.\n\nThe argument highlightNearest highlights nearest when clicking a node.\nThe argument nodesIdSelection adds an id node selection creating an HTML select element.\n\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\nAdding one more select by group.\n\nvisNetwork(GAStech_nodes, GAStech_edges_aggregated, \n           height = \"700px\", width = \"100%\") %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%   \n  visOptions(\n    selectedBy = \"group\",                       \n    highlightNearest = TRUE,\n    nodesIdSelection = TRUE\n  ) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\nAdding Data Manipulation\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123) %&gt;% \n  visOptions(manipulation = TRUE)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 5"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html",
    "title": "Hands-on_Ex04D",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages.\n\n\n\n\nIn this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\n\nThe downloaded binary packages are in\n    /var/folders/4g/tj66tkn119jgpd8qmnnpwhjm0000gn/T//RtmplmdjnH/downloaded_packages\n\n\n\n\n\nIn this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\n\n\n\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis\n\n\n\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles.\n\n\n\n\n\nIn this section, you will gain hands-on experience on building funnel plots step-by-step by using ggplot2. It aims to enhance you working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\n\n\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\n\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly\n\n\n\n\n\n\n\n\n\n\nfunnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#overview",
    "title": "Hands-on_Ex04D",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#installing-and-launching-r-packages",
    "title": "Hands-on_Ex04D",
    "section": "",
    "text": "In this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\n\nThe downloaded binary packages are in\n    /var/folders/4g/tj66tkn119jgpd8qmnnpwhjm0000gn/T//RtmplmdjnH/downloaded_packages"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#importing-data",
    "title": "Hands-on_Ex04D",
    "section": "",
    "text": "In this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#funnelplotr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#funnelplotr-methods",
    "title": "Hands-on_Ex04D",
    "section": "",
    "text": "FunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis\n\n\n\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "title": "Hands-on_Ex04D",
    "section": "",
    "text": "In this section, you will gain hands-on experience on building funnel plots step-by-step by using ggplot2. It aims to enhance you working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\n\n\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\n\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#references",
    "title": "Hands-on_Ex04D",
    "section": "",
    "text": "funnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04B.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04B.html",
    "title": "Hands-on Ex4B",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters\n\n\n\n\nggstatsplot  is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n-   To provide alternative statistical inference methods by default.\n-   To follow best practices for statistical reporting. For all statistica\n\n\n\n\n\n\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4B"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04B.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04B.html#learning-outcome",
    "title": "Hands-on Ex4B",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4B"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04B.html#visual-statistical-analysis-with-ggstatsplot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04B.html#visual-statistical-analysis-with-ggstatsplot",
    "title": "Hands-on Ex4B",
    "section": "",
    "text": "ggstatsplot  is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n-   To provide alternative statistical inference methods by default.\n-   To follow best practices for statistical reporting. For all statistica",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4B"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04B.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04B.html#getting-started",
    "title": "Hands-on Ex4B",
    "section": "",
    "text": "In this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4B"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.\n\n\n\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, ggplot2,\n               patchwork,DT, tidyverse) \n\n\n\n\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\",show_col_types = FALSE)\n\n\n\n\nggiraph  is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides.\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\n\n\n\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:red; #&lt;&lt;\nfont-style:bold; color:white;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\nNotice that the background colour of the tooltip is red and the font colour is white and bold.\n\n\n\n\n\n\n\n\n\n1.Change the color of tooltip_css(use_fill = TRUE)\n2.Add the Hover Interaction to (primary = “yellow”, secondary = “red”)\n3.Set tooltip will be fixed(argument use_cursor_pos is set to FALSE )\n4.Activate zoom\n\n\nShow the code\ntooltip_css &lt;- \"background-color:black; \nfont-style:bold; color:white;\"\n\ncss_default_hover &lt;- girafe_css_bicolor(primary = \"yellow\", secondary = \"red\")\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS , fill = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID,data_id = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 0.5, \n    dotsize = 3,\n    method = \"histodot\",\n    color = NA) +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL) +\n  scale_fill_viridis_c() +\n  theme_minimal()+\n  xlim(min(exam_data$MATHS) - 1, max(exam_data$MATHS) + 1)\n  \ngirafe(                                  \n  ggobj = p + scale_color_viridis_c() ,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(\n  opts_hover(css = css_default_hover),\n  opts_tooltip(\n  use_fill = TRUE,\n  offx = 50,\n  offy = 50, \n  use_cursor_pos = FALSE),\n  opts_zoom(min = 1, max = 4),\n  opts_sizing(rescale = TRUE),\n  opts_toolbar(saveaspng = FALSE, position = \"bottom\", delay_mouseout = 5000)\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo enable hover interaction, we need to include a data_id mapping in geom_dotplot_interactive().\n\n\n\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, linewidth = 0.2\n\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                          \n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe reason that a large orange highlight when interacting is because data_id = CLASS will bind all students in the same class into the same interaction group\n\n\n\n\n\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)      \n\n\n\n\n\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.\n\n\n\n\n\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.\n\n\n\n\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, x = ~ENGLISH, y = ~MATHS, color = ~RACE)\n\nInteractive:\n\nClick on the colour symbol at the legend.\n\n\n\n\n\n\n\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\n\n\n\n\n\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below is used to implement the coordinated brushing shown above.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\n\n\n\n\n\n\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3A"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#learning-outcome",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#learning-outcome",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3A"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#getting-started",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#getting-started",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "First, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, ggplot2,\n               patchwork,DT, tidyverse)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3A"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#importing-data",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#importing-data",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "In this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\",show_col_types = FALSE)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3A"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "ggiraph  is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides.\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3A"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#interactivity",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#interactivity",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "By hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3A"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#interactivity-1",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#interactivity-1",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "By hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\n\n\n\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:red; #&lt;&lt;\nfont-style:bold; color:white;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\nNotice that the background colour of the tooltip is red and the font colour is white and bold.\n\n\n\n\n\n\n\n\n\n1.Change the color of tooltip_css(use_fill = TRUE)\n2.Add the Hover Interaction to (primary = “yellow”, secondary = “red”)\n3.Set tooltip will be fixed(argument use_cursor_pos is set to FALSE )\n4.Activate zoom\n\n\nShow the code\ntooltip_css &lt;- \"background-color:black; \nfont-style:bold; color:white;\"\n\ncss_default_hover &lt;- girafe_css_bicolor(primary = \"yellow\", secondary = \"red\")\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS , fill = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID,data_id = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 0.5, \n    dotsize = 3,\n    method = \"histodot\",\n    color = NA) +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL) +\n  scale_fill_viridis_c() +\n  theme_minimal()+\n  xlim(min(exam_data$MATHS) - 1, max(exam_data$MATHS) + 1)\n  \ngirafe(                                  \n  ggobj = p + scale_color_viridis_c() ,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(\n  opts_hover(css = css_default_hover),\n  opts_tooltip(\n  use_fill = TRUE,\n  offx = 50,\n  offy = 50, \n  use_cursor_pos = FALSE),\n  opts_zoom(min = 1, max = 4),\n  opts_sizing(rescale = TRUE),\n  opts_toolbar(saveaspng = FALSE, position = \"bottom\", delay_mouseout = 5000)\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo enable hover interaction, we need to include a data_id mapping in geom_dotplot_interactive().\n\n\n\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, linewidth = 0.2\n\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                          \n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe reason that a large orange highlight when interacting is because data_id = CLASS will bind all students in the same class into the same interaction group\n\n\n\n\n\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)      \n\n\n\n\n\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.\n\n\n\n\n\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3A"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "Plotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, x = ~ENGLISH, y = ~MATHS, color = ~RACE)\n\nInteractive:\n\nClick on the colour symbol at the legend.\n\n\n\n\n\n\n\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3A"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "Crosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below is used to implement the coordinated brushing shown above.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3A"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#reference",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#reference",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "This link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3A"
    ]
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "A local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.",
    "crumbs": [
      "Home",
      "Take-home Exercise"
    ]
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#the-scene",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#the-scene",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "A local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.",
    "crumbs": [
      "Home",
      "Take-home Exercise"
    ]
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#objectives",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#objectives",
    "title": "Take Home Exercise 1",
    "section": "Objectives",
    "text": "Objectives\nAssuming the role of the graphical editor of the media company, we are tasked to prepare at most three data visualisation for the article.",
    "crumbs": [
      "Home",
      "Take-home Exercise"
    ]
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#data-acquisition",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#data-acquisition",
    "title": "Take Home Exercise 1",
    "section": "Data Acquisition",
    "text": "Data Acquisition\nSingapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 A csv file from Department of Statistics, Singapore (DOS)",
    "crumbs": [
      "Home",
      "Take-home Exercise"
    ]
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#getting-start",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#getting-start",
    "title": "Take Home Exercise 1",
    "section": "Getting start",
    "text": "Getting start\n\nInstalling and Loading R packages\nIn this project,we are going to use the packages as below:\n\ntidyverse – A collection of R packages for data science, including tools for data wrangling and visualization.\nggplot2 – A grammar-based system for creating elegant and complex graphics in R.\ndplyr – A package for fast, intuitive data manipulation using verbs like filter, mutate, and summarise.\nqcc – Tools for statistical quality control charts such as control charts and capability analysis.\npatchwork – Helps combine multiple ggplot2 plots into one graphic layout easily.\ntreemapify – Allows creation of treemaps using ggplot2 syntax to visualize part-to-whole relationships.\nggridges – Enables ridge plots (joyplots) to show distributions across categories.\nggdist – Extends ggplot2 to visualize distributions, uncertainty, and intervals.\nforcats – Simplifies working with categorical (factor) variables in R.\nviridis – Provides colorblind-friendly and perceptually uniform color palettes for plots.\nscales – Formats plot axis labels, legends, and color scales (e.g., commas, percentages).\n\n\npacman::p_load(tidyverse,ggplot2,dplyr,qcc,patchwork,treemapify,ggridges,ggdist,forcats,viridis,scales)",
    "crumbs": [
      "Home",
      "Take-home Exercise"
    ]
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#data-wrangling",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#data-wrangling",
    "title": "Take Home Exercise 1",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\n1.Importing Data\n\nS_data &lt;- read_csv(\"data/respopagesex2024.csv\",show_col_types = FALSE)\n\n\n\n2.Data information\n\npurrr::map_chr(S_data, typeof)\n\n         PA          SZ         Age         Sex         Pop        Time \n\"character\" \"character\" \"character\" \"character\"    \"double\"    \"double\" \n\n\n\n\n\nColumn Headers\nHeaders Info\nData Type\n\n\n\n\nPA\nPlanning Area\nCharacter\n\n\nSZ\nSubzone\nCharacter\n\n\nAge\nSingle Year of Age\nCharacter\n\n\nSex\nSex\nCharacter\n\n\nPop\nResident Count\nDouble\n\n\nTime\nTime/Period\nDouble\n\n\n\n\n\n3.Checking for Missing Values\n\nS_data %&gt;%\n  summarise(across(everything(), ~ sum(is.na(.))))\n\n# A tibble: 1 × 6\n     PA    SZ   Age   Sex   Pop  Time\n  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1     0     0     0     0     0     0\n\n\nAs shown from the result,the dataset S_data is clean in terms of missing data — there are no NA values in any of the columns.\n\n\n4.Checking for Duplicates\nThe first one returns the number of duplicated rows, while the second one helps you view the actual duplicated rows in the dataset.\n\n# Check if there are exact duplicate rows\nS_data %&gt;%\n  duplicated() %&gt;%\n  sum()\n\n[1] 0\n\n# View specific rows that are repeated\nS_data %&gt;%\n  filter(duplicated(.))\n\n# A tibble: 0 × 6\n# ℹ 6 variables: PA &lt;chr&gt;, SZ &lt;chr&gt;, Age &lt;chr&gt;, Sex &lt;chr&gt;, Pop &lt;dbl&gt;,\n#   Time &lt;dbl&gt;\n\n\nThe dataset S_data contains no exact duplicate rows. All records are unique.\n\n\n5.Binning Numerical Variables\n\nAge: The age variable is divided into 19 categories, spanning from 0 to 90+ years old , with 4-year intervals (e.g., 0-4, 5-9, 10-14, etc.).\n\n\nunique(S_data$Age)\n\n [1] \"0\"           \"1\"           \"2\"           \"3\"           \"4\"          \n [6] \"5\"           \"6\"           \"7\"           \"8\"           \"9\"          \n[11] \"10\"          \"11\"          \"12\"          \"13\"          \"14\"         \n[16] \"15\"          \"16\"          \"17\"          \"18\"          \"19\"         \n[21] \"20\"          \"21\"          \"22\"          \"23\"          \"24\"         \n[26] \"25\"          \"26\"          \"27\"          \"28\"          \"29\"         \n[31] \"30\"          \"31\"          \"32\"          \"33\"          \"34\"         \n[36] \"35\"          \"36\"          \"37\"          \"38\"          \"39\"         \n[41] \"40\"          \"41\"          \"42\"          \"43\"          \"44\"         \n[46] \"45\"          \"46\"          \"47\"          \"48\"          \"49\"         \n[51] \"50\"          \"51\"          \"52\"          \"53\"          \"54\"         \n[56] \"55\"          \"56\"          \"57\"          \"58\"          \"59\"         \n[61] \"60\"          \"61\"          \"62\"          \"63\"          \"64\"         \n[66] \"65\"          \"66\"          \"67\"          \"68\"          \"69\"         \n[71] \"70\"          \"71\"          \"72\"          \"73\"          \"74\"         \n[76] \"75\"          \"76\"          \"77\"          \"78\"          \"79\"         \n[81] \"80\"          \"81\"          \"82\"          \"83\"          \"84\"         \n[86] \"85\"          \"86\"          \"87\"          \"88\"          \"89\"         \n[91] \"90_and_Over\"\n\n\nAs seen in the value “90_and_Over”,We need to change it into Numeric for better bin and Create Age_group 19 bins\n\n\nCode-Binning Numerical Variables\nS_data &lt;- S_data %&gt;%\n  mutate(\n    Age = as.character(Age),                            \n    Age_num = suppressWarnings(as.numeric(Age)),        \n    Age_Group = case_when(\n      Age == \"90_and_Over\"              ~ \"90_and_Over\",\n      Age_num &gt;= 0  & Age_num &lt;= 4      ~ \"0-4\",\n      Age_num &gt;= 5  & Age_num &lt;= 9      ~ \"5-9\",\n      Age_num &gt;= 10 & Age_num &lt;= 14     ~ \"10-14\",\n      Age_num &gt;= 15 & Age_num &lt;= 19     ~ \"15-19\",\n      Age_num &gt;= 20 & Age_num &lt;= 24     ~ \"20-24\",\n      Age_num &gt;= 25 & Age_num &lt;= 29     ~ \"25-29\",\n      Age_num &gt;= 30 & Age_num &lt;= 34     ~ \"30-34\",\n      Age_num &gt;= 35 & Age_num &lt;= 39     ~ \"35-39\",\n      Age_num &gt;= 40 & Age_num &lt;= 44     ~ \"40-44\",\n      Age_num &gt;= 45 & Age_num &lt;= 49     ~ \"45-49\",\n      Age_num &gt;= 50 & Age_num &lt;= 54     ~ \"50-54\",\n      Age_num &gt;= 55 & Age_num &lt;= 59     ~ \"55-59\",\n      Age_num &gt;= 60 & Age_num &lt;= 64     ~ \"60-64\",\n      Age_num &gt;= 65 & Age_num &lt;= 69     ~ \"65-69\",\n      Age_num &gt;= 70 & Age_num &lt;= 74     ~ \"70-74\",\n      Age_num &gt;= 75 & Age_num &lt;= 79     ~ \"75-79\",\n      Age_num &gt;= 80 & Age_num &lt;= 84     ~ \"80-84\",\n      Age_num &gt;= 85 & Age_num &lt;= 89     ~ \"85-89\",\n      TRUE ~ NA_character_\n    )\n  )\n\n\n\n\n6.Data preparation\n6.1Data preparation for Region :\n\nMapping Planning Area (PA) to Region: A reference table is manually constructed to assign each Planning Area to one of Singapore’s five broad Regions (e.g., North, East). This enables aggregation and comparison at the regional level.\nExpanding Data and Merging Region Info:\nThe dataset is expanded using uncount() to generate one row per individual based on the population count (Pop). Then, left_join() integrates the region information into the dataset. This transformation facilitates detailed demographic breakdowns by Region, Age, and Gender in subsequent analysis and plots.\n\n\n\nCode-Data preparation for Region\nregion_map &lt;- tibble::tibble(\n  PA = c(\n    \"Ang Mo Kio\", \"Bedok\", \"Bishan\", \"Bukit Batok\", \"Bukit Merah\",\n    \"Bukit Panjang\", \"Bukit Timah\", \"Central Water Catchment\", \"Changi\",\n    \"Choa Chu Kang\", \"Clementi\", \"Downtown Core\", \"Geylang\", \"Hougang\",\n    \"Jurong East\", \"Jurong West\", \"Kallang\", \"Mandai\", \"Marine Parade\",\n    \"Novena\", \"Orchard\", \"Outram\", \"Pasir Ris\", \"Punggol\", \"Queenstown\",\n    \"River Valley\", \"Rochor\", \"Sembawang\", \"Sengkang\", \"Serangoon\",\n    \"Simpang\", \"Tampines\", \"Tanglin\", \"Tengah\", \"Toa Payoh\", \"Tuas\",\n    \"Western Islands\", \"Western Water Catchment\", \"Woodlands\", \"Yishun\",\n    \"Seletar\", \"Southern Islands\", \"Singapore River\", \"Museum\", \"Newton\",\n    \"Straits View\", \"Sungei Kadut\", \"North-Eastern Islands\", \"Marina East\",\n    \"Marina South\"\n  ),\n  Region = c(\n    \"North\", \"East\", \"North\", \"West\", \"South\",\n    \"West\", \"South\", \"South\", \"East\",\n    \"West\", \"West\", \"South\", \"South\", \"North\",\n    \"West\", \"West\", \"South\", \"North\", \"East\",\n    \"South\", \"South\", \"South\", \"East\", \"East\", \"South\",\n    \"South\", \"South\", \"North\", \"East\", \"East\",\n    \"North\", \"East\", \"South\", \"West\", \"South\", \"West\",\n    \"West\", \"West\", \"North\", \"North\",\n    \"East\", \"South\", \"South\", \"South\", \"South\",\n    \"South\", \"North\", \"East\", \"East\", \"East\"\n  )\n)\n\n# Step 2: Merge Region into S_data\ndf_long_region &lt;- S_data %&gt;%\n  uncount(weights = Pop) %&gt;%\n  left_join(region_map, by = \"PA\")\n\n\n6.2 Data preparation for Age :\n\nGroup by Age Group and Sex: Aggregates population counts (Pop) to get total individuals for each combination of age group and gender.\nCalculate Gender-wise Percentage: Within each gender group, computes what proportion each age group represents as a percentage.\nCreate Plot-ready Columns:\n\nPop_plot: Multiplies male values by -1 to align them to the left in a population pyramid.\nPerc_plot: Same logic, but for percentage values.\nLabel_pop and Label_perc: Format population and percentage for cleaner label display in the plot.\n\nSet Age Group Factor Levels:\nEnsures age groups are ordered from youngest to oldest in the vertical axis of the pyramid.1.\nDefine Age Group Order:\nOriginal Age_Group classification and Manually define a logical order for Age_Group using factor(levels = ...) to ensure the y-axis in the plot appears from youngest to oldest.\n\n\n\nCode-Data preparation for Age\npyramid_data &lt;- S_data %&gt;%\n  group_by(Age_Group, Sex) %&gt;%\n  summarise(Population = sum(Pop), .groups = \"drop\") %&gt;%\n  group_by(Sex) %&gt;%\n  mutate(Percentage = Population / sum(Population) * 100) %&gt;%\n  mutate(\n    Pop_plot = ifelse(Sex == \"Males\", -Population, Population),\n    Perc_plot = ifelse(Sex == \"Males\", -Percentage, Percentage),\n    Label_pop = format(Population, big.mark = \",\"),  \n    Label_perc = paste0(round(Percentage, 1), \"%\")\n  )\n\nage_levels &lt;- c(\n  \"0-4\", \"5-9\", \"10-14\", \"15-19\", \"20-24\", \"25-29\",\n  \"30-34\", \"35-39\", \"40-44\", \"45-49\", \"50-54\", \"55-59\",\n  \"60-64\", \"65-69\", \"70-74\", \"75-79\", \"80-84\", \"85-89\", \"90_and_Over\"\n)\npyramid_data$Age_Group &lt;- factor(pyramid_data$Age_Group, levels = age_levels)\n\n#Keep original Age_Group classification and use factor to manually sort\nage_levels &lt;- c(\n  \"0-4\", \"5-9\", \"10-14\", \"15-19\", \"20-24\", \"25-29\",\n  \"30-34\", \"35-39\", \"40-44\", \"45-49\", \"50-54\", \"55-59\",\n  \"60-64\", \"65-69\", \"70-74\", \"75-79\", \"80-84\", \"85-89\", \"90_and_Over\"\n)\n\n\n6.3 Data preparation for desnsity:\n\nStandardize the Age Variable：\nConvert the Age variable into numeric format. The \"90_and_Over\" label is replaced with the numeric value 90 to allow proper statistical calculations (e.g., mean, density).\nExpand the Data by Population Count：\nTransform the dataset so each row represents one individual, replicating rows according to the Pop column (population count). This makes it suitable for density estimation.\nCompute Density Peaks and Median\nFor each gender:\nEstimate a density curve over age.\nIdentify the peak point (the age with the highest density) and Median point.\nStore the peak age and corresponding density value for annotation.\n\n\n\nCode-Data preparation for desnsity\n# Step 1: Clean the Age data with data type transformation\nS_data &lt;- S_data %&gt;%\n  mutate(Age = ifelse(Age == \"90_and_Over\", \"90\", Age),\n         Age_numeric = as.numeric(Age))\n\n# Step 2: Expand to \"one row per person\"\nS_long &lt;- S_data %&gt;%\n  uncount(weights = Pop)\n\n# Step 3: Average age (mean)\navg_age &lt;- S_long %&gt;%\n  group_by(Sex) %&gt;%\n  summarise(mean_age = mean(Age_numeric))\n\n# Step 4: Density peak + y-coordinate adjustments for vertical separation\ndensity_peaks &lt;- S_long %&gt;%\n  group_by(Sex) %&gt;%\n  summarise(\n    peak_age = density(Age_numeric)$x[which.max(density(Age_numeric)$y)],\n    peak_density = max(density(Age_numeric)$y)\n  ) %&gt;%\n  mutate(\n    label_text = paste0(Sex, \": \", round(peak_age, 1)),\n    label_y = peak_density + ifelse(Sex == \"Males\", 0.0006, 0.0009)  \n  )\n\n# Step 5: Prepare mean_labels for bottom annotation\nmean_labels &lt;- avg_age %&gt;%\n  mutate(\n    label_text = paste0(round(mean_age, 1)),\n    label_y = 0.001,  \n    label_x = ifelse(Sex == \"Males\", mean_age - 8, mean_age + 5) \n  )\n\n# Step 4 : Median calculation with cleaning\ndf_long_region &lt;- df_long_region %&gt;%\n  mutate(\n    Age = ifelse(Age == \"90_and_Over\", \"90\", Age),  \n    Age = as.numeric(Age)                          \n  ) %&gt;%\n  filter(!is.na(Age))  \n\nmedian_age &lt;- median(df_long_region$Age)\ndf_median &lt;- data.frame(Median = median_age)\n\n\nmedian_age &lt;- median(df_long_region$Age, na.rm = TRUE)\ndf_median &lt;- data.frame(Median = median_age)\n\ndf_region_gender &lt;- df_long_region %&gt;%\n  filter(!is.na(Sex), !is.na(Region)) %&gt;%\n  group_by(Region, Sex) %&gt;%\n  summarise(n = n(), .groups = \"drop\")\n\n\n6.4 Data preparation for Multivariate relationship between Region × Age Group × Gender:\n\nGroup Data by Region, Age Group, and Gender\nUse group_by(Region, Age_Group, Sex) and summarise() to count the number of individuals (Pop) in each subgroup.\nConvert to Wide Format\nUse pivot_wider() to restructure the data so that each row contains counts of both Males and Females, facilitating ratio calculation.\nFill missing values with 0 to avoid calculation errors.\nCalculate Female-to-Male Ratio\nCreate a new variable SexRatio = Females / Males.\n\n\n\nCode-Data preparation for Heatmap\ndf_sex_ratio &lt;- df_long_region %&gt;%\n  filter(!is.na(Sex), !is.na(Age_Group)) %&gt;%\n  mutate(Age_Group = factor(Age_Group, levels = age_levels)) \n\n# Count the number of people in each Region + AgeGroup + Sex\ndf_grouped &lt;- df_sex_ratio %&gt;%\n  group_by(Region, Age_Group, Sex) %&gt;%\n  summarise(Pop = n(), .groups = \"drop\")\n\n# Convert to wide format, one line contains the number of female / male\ndf_wide &lt;- df_grouped %&gt;%\n  pivot_wider(names_from = Sex, values_from = Pop, values_fill = 0)\n\n# Calculating Female-to-Male Ratios\ndf_wide &lt;- df_wide %&gt;%\n  mutate(SexRatio = Females / ifelse(Males == 0, NA, Males))",
    "crumbs": [
      "Home",
      "Take-home Exercise"
    ]
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#data-analysis",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#data-analysis",
    "title": "Take Home Exercise 1",
    "section": "Data Analysis",
    "text": "Data Analysis\n\nI.Exploration of Singapore Population and Age Distribution by Gender (2024)\n1.1 Population pyramid using gender and age group information from S_data.And it shows the structural proportion of each group\n\n\nCode-Population pyramid\nP1 &lt;- ggplot(pyramid_data, aes(x = Age_Group, y = Perc_plot, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.8) +\n  \n  geom_text(aes(y = ifelse(Sex == \"Males\", Perc_plot - 0.6, Perc_plot + 0.6), \n                label = Label_perc),\n            size = 3, color = \"black\") +\n\n  scale_y_continuous(\n    limits = c(-10, 10),\n    breaks = seq(-10, 10, 2),\n    labels = function(x) paste0(abs(x), \"%\")\n  ) +\n\n  coord_flip() +\n  labs(title = \"Population Pyramid (2024)\",\n       x = \"Age Group\",\n       y = \"Population (%)\") +\n  scale_fill_manual(values = c(\"Males\" = \"#91C4F2\", \"Females\" = \"#F4B183\")) +\n  theme_minimal() +\n  theme(\n    axis.text = element_text(color = \"black\", face = \"bold\"),\n    axis.title = element_text(color = \"black\", face = \"plain\"),\n    plot.title.position = \"plot\",\n    \n  )\n\n\n1.2 Density Plot highlights where the population is most concentrated\n\n\nCode-Density Plot\n# Step 6: Plot\nP2 &lt;- ggplot(S_long, aes(x = Age_numeric, fill = Sex, color = Sex)) +\n  geom_density(alpha = 0.4, size = 1) +\n\n  # Vertical dashed mean line\n  geom_vline(data = avg_age, aes(xintercept = mean_age, color = Sex),\n             linetype = \"dashed\", size = 1) +\n\n  # Mean text near bottom\n  geom_text(data = mean_labels,\n            aes(x = label_x, y = label_y, label = label_text),\n            size = 4, color = \"black\", hjust = 0.2) +\n\n  # Peak text near top, vertically spaced\n  geom_text(data = density_peaks,\n            aes(x = peak_age, y = label_y, label = label_text),\n            size = 4, color = \"black\") +\n\n  labs(\n    title = \"Age Density by Gender (with Mean & Peak)\",\n    x = \"Age (Years)\",\n    y = \"Density\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0, face = \"bold\"),\n    plot.title.position = \"plot\",\n    axis.text = element_text(color = \"black\", face = \"bold\"),\n    legend.position = \"right\"\n  ) +\n  scale_fill_manual(values = c(\"Males\" = \"#91C4F2\", \"Females\" = \"#F4B183\")) +\n  scale_color_manual(values = c(\"Males\" = \"#91C4F2\", \"Females\" = \"#F4B183\"))\n\n\n\n\nVisualisation I\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlayout &lt;- \"\nA#\nB#\n\"\n\nP1 + P2 +\n  plot_layout(design = layout) +\n  plot_annotation(\n    title = \"Singapore Population Structure and Age Distribution by Gender (2024)\",\n    theme = theme(plot.title = element_text(hjust = 0.5, face = \"bold\",size = 16))\n  )\n\n\n\n\n\n\nKey Observations & Insights\n\n\nThe largest population share is in the 30–54 age groups for both genders.\nThe base of the pyramid (ages 0–19) is narrower, indicating lower birth rates in recent years.\nBeyond age 65, the number of females exceeds males significantly.\nThe oldest age groups (especially 85+) are mostly female.\nThe density plot shows peaks around age 34–35 for both genders.\nMean age is slightly higher for females (34.7) than males (34.3).\nThe female curve extends further right, suggesting longer life expectancy.\n\nThese visualisations collectively reflect a maturing demographic structure. The dominance of the working-age population (30–54) suggests current economic stability, but the shrinking young cohort (0–19) raises concerns about future workforce replacement. The clear rise in elderly females implies a gendered ageing trend, pointing to disproportionate healthcare and eldercare demands on women. This has policy implications in terms of labour planning, social support systems, and retirement infrastructure. An ageing population with longer female longevity also highlights the need for gender-sensitive ageing policies and sustainable intergenerational support mechanisms.\n\n\n\nII.Exploration of Age Density Distributions Across Singapore’s Planning Areas (2024)\nThe reason why choosing Boxplot is that it highlights variations in median age and age spread and helps identify areas with younger or older populations relative to the national median,supporting demographic insights for targeted policy and planning.\n\n\nCode-Boxplot\nP3 &lt;- ggplot(df_long_region, aes(x = PA, y = Age)) +\n  geom_boxplot(\n    fill = \"white\",\n    color = \"black\",\n    outlier.color = \"gray40\",\n    outlier.size = 1,\n    width = 0.6,\n    alpha = 0.9\n  ) +\n  geom_hline(\n    data = df_median,\n    aes(yintercept = Median, color = \"Median\"),\n    linetype = \"dashed\",\n    size = 0.8,\n    show.legend = TRUE\n  ) +\n  scale_color_manual(\n    name = NULL,\n    values = c(\"Median\" = \"red\"),\n    labels = c(\"Median\" = paste0(\"National Median = \", median_age))\n  ) +\n  facet_wrap(~ Region, scales = \"free_x\", ncol = 4, nrow = 1) +\n  labs(\n    title = \"Boxplot of Age Distribution by Planning Region (2024)\",\n    x = \"Planning Area\", y = \"Age\"\n  ) +\n  theme_gray(base_size = 12) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 10, hjust = 0.5),\n    axis.title = element_text(size = 11, face = \"bold\"),\n    axis.text.x = element_text(size = 10, angle = 45, hjust = 1, face = \"bold\"),\n    axis.text.y = element_text(size = 10),\n    legend.position = \"bottom\",\n    legend.text = element_text(size = 12)\n  )\n\n\nThe reason why choosing Ridgeline density plot with ECDF shading is that it can highlight where population age is most concentrated and emphasizes core age groups within each area.\n\n\nCode-Density Distributions Plot\nP4&lt;-ggplot(df_long_region, aes(x = Age, y = PA, fill = 0.5 - abs(0.5 - stat(ecdf)))) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE,\n    scale = 1.2,\n    rel_min_height = 0.01,\n    alpha = 0.95,\n    from = 0 \n  ) +\n  facet_wrap(~ Region, scales = \"free\", ncol = 4) +\n  scale_fill_viridis_c(\n    option = \"D\", direction = -1,\n    name = \"0.5 - |0.5 - ECDF|-Density emphasis on the core age group in each planning area\",\n    guide = guide_colorbar(\n      title.position = \"top\", \n      title.hjust = 0.5, \n      barwidth = 20,   \n      barheight = 0.8\n    )\n  ) +\n  labs(\n    title = \"Age Density Distributions Across Singapore's Planning Areas (2024)\",\n    x = \"Age\", y = \"Planning Area\"\n  ) +\n  theme_minimal(base_size = 11) +\n  theme(\n  plot.title = element_text(face = \"bold\", size = 16, hjust = 0.5),\n  axis.text.y = element_text(size = 12, face = \"bold\"),  \n  axis.text.x = element_text(size = 12, face = \"bold\"),  \n  axis.title.y = element_text(size = 13, face = \"bold\"), \n  axis.title.x = element_text(size = 13, face = \"bold\"), \n  strip.text = element_text(face = \"bold\", size = 11),\n  legend.position = \"bottom\",\n  legend.box.margin = margin(t = 3),\n  legend.title = element_text(size = 9, face = \"bold\"),\n  legend.text = element_text(size = 12)\n  )\n\n\n\n\nVisualisation II\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nP4 / P3 \n\n\n\n\n\n\nKey Observations & Insights\n\n\nAge distributions in Seletar and Bukit Timah are skewed toward older age groups, with density curves leaning to the right.\nNewer planning areas like Tengah and Punggol show younger age profiles, with left-skewed density curves and lower median ages in the boxplots.\nMost planning areas have median ages between 35 and 50, with the red dashed line (median = 42) intersecting many boxplots.\nThe South region has many planning areas with highly varied age distributions and numerous outliers.\nThe intensity of the density plot’s shading highlights age concentration levels, with some areas showing clear peaks around core age groups.\n\nThese visualisations reveal distinct demographic differences between older and newer planning areas. New towns like Punggol and Tengah attract a younger population, reflecting family-oriented migration and urban development, while mature estates such as Seletar and Orchard show a concentration of older residents—indicating housing stability and long-term settlement. The overall median age centers around 42, underscoring Singapore’s twin demographic challenges: an ageing population and declining birth rates. The spatial disparity in age structure calls for region-specific resource planning—particularly in childcare, healthcare, and transport. Notably, ageing districts may require targeted investments in elder-friendly infrastructure and services to address future demands effectively.\n\n\n\nIII.Exploration of Population Structure and Gender Distribution Across Singapore’s Planning Areas (2024)\nStacked plots ：To provide a clear overview of the total population breakdown by gender (Males vs. Females) across Singapore’s four regions (East, North, South, West)\n\n\nCode-Stacked plots\ndf_region_gender &lt;- df_long_region %&gt;%\n  filter(!is.na(Sex), !is.na(Region)) %&gt;%\n  group_by(Region, Sex) %&gt;%\n  summarise(n = n(), .groups = \"drop\")\n\nP5 &lt;- ggplot(df_region_gender, aes(x = Region, y = n, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.5, alpha = 0.85) +  \n\n  geom_text(\n    aes(label = comma(n)),\n    position = position_stack(vjust = 0.5),  \n    size = 4,\n    color = \"white\",\n    fontface = \"bold\"\n  ) +\n\n  labs(\n    title = \"Total Population by Region and Gender\",\n    x = \"Region\",\n    y = \"Population\"\n  ) +\n  scale_y_continuous(labels = comma, expand = expansion(mult = c(0, 0.05))) +\n  scale_fill_manual(values = c(\"Males\" = \"#4575b4\", \"Females\" = \"#d73027\")) +  # 更浅颜色\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0, face = \"plain\", size = 14, margin = margin(b = 15)),\n    axis.title = element_text(face = \"plain\"),\n    axis.text = element_text(size = 11),\n    legend.title = element_blank(),\n    legend.position = \"bottom\"\n  )\n\n\nThe reason why choosing Heatmap is that it can identify gender imbalances and demographic aging patterns across Singapore.The color gradient can show whether there are more women than men (red) or vice versa (blue) across age groups and regions.\n\n\nCode-Heatmap\n# Step 5: Draw a heat map\nP6&lt;-ggplot(df_wide, aes(x = Region, y = fct_rev(Age_Group), fill = SexRatio)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient2(\n    low = \"#4575b4\", mid = \"white\", high = \"#d73027\", midpoint = 1,\n    name = \"F/M Ratio\",\n    guide = guide_colorbar(title.position = \"bottom\", title.hjust = 0.5),\n    limits = c(0.5, 1.5),\n    na.value = \"grey70\"\n  ) +\n  labs(\n    title = \"Gender Ratio Heatmap by Age Group and Region (F/M)\",\n    x = \"Region\",\n    y = \"Age Group\",caption = \"Note: &lt;1 = More Males, &gt;1 = More Females\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0, face = \"plain\"),\n    axis.title = element_text(face = \"plain\"),\n    axis.text = element_text(size = 11),\n    legend.title = element_text(face = \"plain\"),\n    legend.position = \"bottom\",\n    plot.caption = element_text(hjust = 0, size = 9, face = \"italic\", color = \"black\")\n  )\n\n\n\n\nVisualisation III\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(P5 + P6) +\n  plot_annotation(\n    title = \"Population Structure and Gender Distribution Across Regions (2024)\",\n    theme = theme(\n      plot.title = element_text(size = 17, face = \"bold\", hjust = 0.5)\n    ))\n\n\n\n\n\n\nKey Observations & Insights\n\n\nEast Region has the highest population for both males and females.\nFemale counts exceed male counts in all four regions.\nSouth Region has the smallest total population among the four.\nAge groups 30–54 show near parity in the F/M ratio across all regions.\nOlder age groups (75–89), especially in the West, show a higher female-to-male ratio (&gt;1.25).\nYounger age groups (0–24) tend to show balanced or male-skewed ratios (&lt;1).\n\nThese visualisations reveal Singapore’s ageing population structure, with women outliving men especially in the older age brackets. The stacked bar chart highlights female dominance in total population counts, while the heatmap deepens the picture, showing where gender imbalances become more pronounced with age. This dual perspective underscores the need for gender-sensitive ageing policies, such as healthcare and community support tailored for older women, particularly in regions like the West where the female-to-male ratio peaks in the elderly segment.",
    "crumbs": [
      "Home",
      "Take-home Exercise"
    ]
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#conclusion",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#conclusion",
    "title": "Take Home Exercise 1",
    "section": "Conclusion",
    "text": "Conclusion\nThese visualisations provide a comprehensive overview of Singapore’s evolving demographic landscape. They reveal a society characterised by a dominant working-age population, a steadily ageing citizen base, and notable gender disparities in longevity. While younger cohorts are shrinking—particularly in newer towns like Punggol and Tengah—the elderly population is expanding, especially among women in mature estates and western regions. The rising median age and widening spatial age gaps underscore the urgency of tailored policy interventions. These include region-specific investments in eldercare, healthcare, and childcare infrastructure, alongside broader strategies to support intergenerational cohesion and economic sustainability. Singapore’s demographic trajectory calls for integrated planning that is both age- and gender-responsive, ensuring resilience amid shifting population dynamics.",
    "crumbs": [
      "Home",
      "Take-home Exercise"
    ]
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01B.html",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01B.html",
    "title": "Take Home Exercise1B",
    "section": "",
    "text": "A local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.\n\n\n\nIn this take-home exercise, we are required to:\n\nSelecting one submission provided by our classmate,\ncritic three good design principles and three areas for further improvement.\nWith reference to the comment, prepare the makeover version of the data visualisation.\nI will use clarity and aesthetics as criteria to comment on my classmate’s work.\n\n\n\n\n\n\nCriteria for criticism—clarity or aesthetics?\n\n\n\nThe original visualisation can be found in this link\n\n\n\n\nWe will now set up according to the original code provided in the link.\nThe following packages are used for data wrangling and visualization:\n\ntidyverse: A collection of R packages for data science, including dplyr, ggplot2, and others for data manipulation and visualization.\nggplot2: A grammar of graphics for creating static, animated, and interactive data visualizations.\ndplyr: Provides a set of functions for efficiently manipulating datasets (e.g., filtering, selecting, and summarising).\nforcats: Tools for working with categorical variables (factors), especially useful for reordering and relabeling.\nggthemes: Offers additional themes and scales to improve the aesthetics of ggplot2 charts.\npatchwork: Enables combining multiple ggplot2 plots into a single layout.\nknitr: Facilitates dynamic report generation by weaving R code into documents.\ngt: Used to create elegant tables for display in HTML or markdown reports.\n\nThe following code chunk uses p_load () of pacman packages to check if tidyverse packages are installed and can be called into R.\n\npacman::p_load(tidyverse, ggplot2, dplyr, forcats, ggthemes, patchwork, knitr, gt,scales,gghalves,ggdist,ggforce)\n\n\n\n\n\n\nThis dataset stores “90_and_Over” as a character value in the Age column, we need to clean and convert it to a numeric value to perform age-based analysis. We use 95 as a conservative numeric replacement.\n\ndata &lt;- read_csv(\"Data/respopagesex2024.csv\") %&gt;%\n  mutate(Age = ifelse(Age == \"90_and_Over\", \"95\", Age),\n         Age = as.numeric(Age)) %&gt;%\n  drop_na(Age)\n\n\n\n\n\nsum(duplicated(data))\n\n[1] 0\n\n\n\n\n\n\ngrouped &lt;- data %&gt;%\n  select(PA, SZ) %&gt;%\n  distinct() %&gt;%\n  arrange(PA, SZ) %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Subzones = paste(SZ, collapse = \", \"))\n\ngrouped %&gt;%\n  gt() %&gt;%\n  tab_header(\n    title = \"Planning Areas and Their Subzones\"\n  )\n\n\n\n\n\n\n\n\n\nCode-Original Plot 1\nage_groups &lt;- data %&gt;%\n  filter(Age &lt;= 14 | Age &gt;= 65) %&gt;%\n  mutate(group = case_when(\n    Age &lt;= 14 ~ \"Young\",\n    Age &gt;= 65 ~ \"Aging\"\n  )) %&gt;%\n  group_by(PA, group) %&gt;%\n  summarise(total_pop = sum(Pop), .groups = \"drop\")\n\ntop_pa &lt;- age_groups %&gt;%\n  group_by(PA) %&gt;%\n  summarise(total = sum(total_pop)) %&gt;%\n  arrange(desc(total)) %&gt;%\n  slice_head(n = 20)  # select top 20\n\ntop_age_groups &lt;- age_groups %&gt;%\n  filter(PA %in% top_pa$PA)\n\n# Define the order (e.g. by total population descending)\npa_order &lt;- top_age_groups %&gt;%\n  group_by(PA) %&gt;%\n  summarise(total = sum(total_pop)) %&gt;%\n  arrange(desc(total)) %&gt;%\n  pull(PA)\n\n# Apply the same factor levels\ntop_age_groups &lt;- top_age_groups %&gt;%\n  mutate(PA = factor(PA, levels = pa_order))\n\nratio_data &lt;- age_groups %&gt;%\n  filter(PA %in% top_pa$PA) %&gt;%\n  pivot_wider(names_from = group, values_from = total_pop) %&gt;%\n  mutate(ratio = Aging / Young) %&gt;%\n  filter(!is.na(PA)) %&gt;%  # Remove NAs\n  mutate(PA = factor(PA, levels = pa_order))\n\n# Top bar chart\nbar_plot &lt;- ggplot(top_age_groups, aes(x = total_pop, y = fct_rev(PA), fill = group)) +\n  geom_col(position = \"dodge\") +\n  labs(x = \"Population\", y = NULL, fill = \"Age Group\") +\n  theme_minimal()\n\n# Bottom line chart with consistent PA order\nline_plot &lt;- ggplot(ratio_data, aes(x = PA, y = ratio)) +\n  geom_point(size = 3, color = \"black\") +\n  geom_line(aes(group = 1), color = \"black\") +\n  labs(x = \"Planning Area\", y = \"Aging / Young Ratio\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Combine them\n(bar_plot / line_plot) + plot_layout(heights = c(2, 1)) +\n  plot_annotation(title = \"Population Distribution and Aging Ratio by Planning Area\")\n\n\n\n\n\n\n\n\n\nThe combination of the plots reflect both absolute population numbers and structural proportions by top 20 region.\n\nGood pointsMakeover points\n\n\n1.The classmate selected the top 20 most relevant regions to display insights more clearly. In her original population chart, some of the population gaps between regions were so large that it was difficult to interpret the bar values. Focusing on the top 20 regions helps highlight the key areas and improves readability\n2.The basic color pairing (red vs. teal) effectively distinguishes the two age groups, allowing readers to quickly understand the meaning without much effort.the basic color pairing (red vs. teal) effectively distinguishes the two age groups, allowing readers to quickly understand the meaning without much effort.\n3.Using horizontal bar charts and applying a 45-degree tilt to the labels in the lower chart improves clarity, especially for long region names. While reviewing other classmates’ charts, I noticed that vertical text labels were often hard to read. This layout enhances accessibility and viewer experience.\n4.The aging-to-young ratio is a meaningful indicator that reflects the structural skew of the population. It helps identify whether a region is dominated by an aging population or has a relatively younger demographic, providing useful context for planning and policy decisions.\n\n\nThe bar chart:\nClarity:\n\nEnsure correct initial interpretation of the chart:the upper plot would benefit from a clearer title, as the current layout may cause confusion—viewers might initially think the bar chart represents the aging-to-young ratio.\nSeparates the focus areas and avoids misinterpretation:to improve clarity, it’s advisable to include both a main title and distinct subtitles for the two charts.\nImproves user navigation and insight extraction:sorting the bars by total or aging population would enhance readability and help viewers identify key regions more easily.\nProvides exact values and supports better comprehension:It would be beneficial to include data labels on the bars.\nMakes age group definitions explicit and avoids ambiguity : Add a legend label like: “Aging = 65 and above”.\n\nAesthetics:\n\nReduces visual density and makes the plot more digestible:The physical spacing between grouped bars could be adjusted to reduce clutter and improve visual clarity.\nImproves inclusivity and visual distinction:Consider enhancing the legend or replacing colors with more accessible alternatives.\nImproves user comfort and aesthetic appeal:The colour here is too glaring. We need to adjust the colour depth or transparency to make the plot more comfortable and readable for readers.\n\nThe ratio plot\nClarity:\n\nAdd a Structural Reference Line: The current chart lacks a visual indicator to help interpret what constitutes a “balanced” aging structure. Adding a horizontal line at y = 1, labeled as “Balanced Ratio” or “1.0 Threshold”, would make it clear that a ratio above 1 indicates the elderly population exceeds the youth population.\nHighlight Extreme Values:Certain regions such as Punggol (lowest ratio) and Ang Mo Kio (highest ratio) show significant extremes but are not explicitly emphasized. These key points could be highlighted using different colors or text annotations, such as “Highest: Ang Mo Kio (Ratio = 2.2)”, to draw attention and enhance insight.\nEnhance Axis Labels and Styling:The current Y-axis uses plain numeric values (e.g., 0.5 to 2.0) without explanation. It should be relabeled as “Aging-to-Young Ratio (Elderly / Youth)”, and a subtitle like “Ratio above 1.0 indicates elderly outnumber youth” can provide context.\n\nAesthetics:\n\nVisual Styling for Reference and Highlights:Replacing the plain black reference line with a blue gradient and using red highlights for extreme points would improve both aesthetic appeal and clarity.\n\n\n\n\n\n\nCode-Makeover Plot 2\n# Data preprocessing\nage_groups &lt;- data %&gt;%\n  filter(Age &lt;= 14 | Age &gt;= 65) %&gt;%\n  mutate(group = case_when(\n    Age &lt;= 14 ~ \"Young\",\n    Age &gt;= 65 ~ \"Aging\"\n  )) %&gt;%\n  group_by(PA, group) %&gt;%\n  summarise(total_pop = sum(Pop), .groups = \"drop\")\n\n# Sort by elderly population and select the top 20 PAs\ntop_pa &lt;- age_groups %&gt;%\n  filter(group == \"Aging\") %&gt;%\n  arrange(desc(total_pop)) %&gt;%\n  slice_head(n = 20) %&gt;%\n  pull(PA)\n\n# Create top_age_groups\ntop_age_groups &lt;- age_groups %&gt;%\n  filter(PA %in% top_pa)\n\n# Sort order: By elderly population\npa_order &lt;- top_age_groups %&gt;%\n  filter(group == \"Aging\") %&gt;%\n  arrange(desc(total_pop)) %&gt;%\n  pull(PA)\n\n# Apply factor levels for consistent plotting\ntop_age_groups &lt;- top_age_groups %&gt;%\n  mutate(PA = factor(PA, levels = pa_order))\n\n# Calculate national averages\navg_pop &lt;- mean(age_groups$total_pop)\n\navg_aging_pop &lt;- age_groups %&gt;%\n  filter(group == \"Aging\") %&gt;%\n  summarise(mean_pop = mean(total_pop)) %&gt;%\n  pull(mean_pop)\n\navg_young_pop &lt;- age_groups %&gt;%\n  filter(group == \"Young\") %&gt;%\n  summarise(mean_pop = mean(total_pop)) %&gt;%\n  pull(mean_pop)\n\n# Calculate aging-to-young ratio for top PAs\nratio_data &lt;- age_groups %&gt;%\n  filter(PA %in% top_pa) %&gt;%\n  pivot_wider(names_from = group, values_from = total_pop) %&gt;%\n  mutate(ratio = Aging / Young) %&gt;%\n  filter(!is.na(PA)) %&gt;%\n  mutate(PA = factor(PA, levels = pa_order))\n\n# Extreme value labels\nmax_label &lt;- ratio_data %&gt;% slice_max(ratio, n = 1)\nmin_label &lt;- ratio_data %&gt;% slice_min(ratio, n = 1)\nnon_extreme &lt;- ratio_data %&gt;%\n  filter(!(PA %in% c(max_label$PA, min_label$PA)))\n\n# Top Bar Chart\nbar_plot &lt;- ggplot(top_age_groups, aes(x = total_pop, y = PA, fill = group)) +\n  geom_col(position = position_dodge(width = 0.6), width = 0.5, alpha = 0.85) +\n  geom_text(aes(label = comma(total_pop)), \n            position = position_dodge(width = 0.9), \n            hjust = -0.1, size = 3) +\n  geom_vline(xintercept = avg_aging_pop, linetype = \"dashed\", color = \"#29B4B6\", size = 0.6) +\n  geom_vline(xintercept = avg_young_pop, linetype = \"dashed\", color = \"#F0776D\", size = 0.6) +\n  scale_fill_manual(\n    values = c(\"Young\" = \"#F0776D\", \"Aging\" = \"#29B4B6\"),\n    name = \"Age Group\",\n    labels = c(\"Aging = 65 and above\", \"Young = 0–14\")\n  ) +\n  labs(\n    x = \"Population\", \n    y = NULL,\n    title = \"Distribution of Aging vs. Young Population and Dependency Ratio across SG Planning Areas (2024)\",\n    subtitle = paste0(\n      \"Top 20 Planning Areas by Aging Population\\n\",\n      \"Dashed lines: National Average — Aging (\", comma(round(avg_aging_pop)), \n      \"), Young (\", comma(round(avg_young_pop)), \")\"\n    )\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    legend.position = \"bottom\",\n    plot.subtitle = element_text(size = 11)\n  )\n\n# Ratio Plot\nline_plot &lt;- ggplot(ratio_data, aes(x = PA, y = ratio)) +\n  geom_hline(yintercept = 1, linetype = \"dashed\", color = \"grey40\") +\n  geom_line(aes(group = 1), color = \"steelblue\") +\n  geom_point(size = 3, color = \"steelblue\") +\n  geom_text(data = max_label, aes(label = paste0(\"Highest: \", PA, \" (\", round(ratio, 2), \")\")),\n            vjust = -1.2, color = \"red\", size = 3.5,hjust = 1,          \n          nudge_x = -0.5,nudge_y=-0.2) +\n  geom_text(data = min_label, aes(label = paste0(\"Lowest: \", PA, \" (\", round(ratio, 2), \")\")),\n            vjust = 1.8, color = \"red\", size = 3.5) +\n  geom_text(data = non_extreme, \n          aes(label = round(ratio, 2)), \n          hjust = 0,nudge_x = 0.3, size = 3, color = \"black\")+\n  scale_y_continuous(name = \"Aging-to-Young Ratio (Elderly / Youth)\", limits = c(0, NA)) +\n  labs(x = \"Planning Area\",\n       subtitle = \"Aging-to-Young Population Ratio (Ratio &gt; 1: Elderly Outnumber Youth)\") +\n  theme_minimal(base_size = 12) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Combine plots with improved title\nfinal_plot &lt;- (bar_plot / line_plot) +\n  plot_layout(heights = c(2, 1)) +\n  plot_annotation(\n    title = \"Aging and Youth Population Structure across Singapore Planning Areas (2024)\",\n    theme = theme(plot.title = element_text(size = 15, face = \"bold\"))\n  )\n\nprint(final_plot)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOverall Value to the Reader after improvement\n\n\n\n\nComparability: Enables direct comparisons between regions vs. national average and elderly vs. youth populations\nSorted structure: Helps highlight priority areas with the highest aging population\nClear information hierarchy: Presents both population distribution (bar chart) and structural insights (aging-to-youth ratio line chart)\nIf the goal is to inform policy decisions, guide resource allocation, or highlight the severity of aging issues, Improvement Figure which with more information is better suited as the main visualization.\n\n\n\n\n\n\n\n\nCode-Original Plot 2\nexpanded_data &lt;- data %&gt;%\n  filter(!is.na(PA)) %&gt;%\n  mutate(Age = ifelse(Age == \"90_and_Over\", \"95\", Age),\n         Age = as.numeric(Age)) %&gt;%\n  filter(!is.na(Age)) %&gt;%\n  mutate(PA = str_trim(PA)) %&gt;%\n  mutate(region_type = case_when(\n    # Core Central Region\n    PA %in% c(\"Downtown Core\", \"Outram\", \"Sentosa\", \"Rochor\", \"Orchard\", \"Newton\",\n              \"River Valley\", \"Bukit Timah\", \"Holland Road\", \"Tanglin\", \"Novena\", \"Thomson\") ~ \"Core Central Region \",\n    \n    # Rest of Central Region\n    PA %in% c(\"Bishan\", \"Bukit Merah\", \"Geylang\", \"Kallang\", \"Marine Parade\", \"Queenstown\", \"Southern Islands\", \"Toa Payoh\") ~ \"Rest of Central Region \",\n    \n    # North Region\n    PA %in% c(\"Central Water Catchment\", \"Lim Chu Kang\", \"Mandai\", \"Sembawang\", \"Simpang\", \"Sungei Kadut\", \"Woodlands\", \"Yishun\") ~ \"North Region \",\n    \n    # North-East Region\n    PA %in% c(\"Ang Mo Kio\", \"Hougang\", \"North-Eastern Islands\", \"Punggol\", \"Seletar\",\n              \"Sengkang\", \"Serangoon\") ~ \"North-East Region \",\n    \n    # East Region\n    PA %in% c(\"Bedok\", \"Changi\", \"Changi Bay\", \"Paya Lebar\", \"Pasir Ris\", \"Tampines\") ~ \"East Region \",\n    \n    # West Region\n    PA %in% c(\"Bukit Batok\", \"Bukit Panjang\", \"Boon Lay\", \"Pioneer\", \"Choa Chu Kang\", \"Clementi\", \"Jurong East\", \"Jurong West\", \"Tengah\", \"Tuas\", \"Western Islands\", \"Western Water Catchment\") ~ \"West Region \",\n    TRUE ~ NA_character_\n  )) %&gt;%\n  filter(!is.na(region_type)) %&gt;%\n  uncount(weights = Pop)\n\np1 &lt;- ggplot(expanded_data, aes(x = region_type, y = Age, fill = region_type)) +\n  geom_boxplot() +\n  labs(title = \"Age Distribution by Region Type\", x = \"Region\", y = \"Age\") +\n  theme_minimal() +\n  coord_flip()\n\np2 &lt;- ggplot(expanded_data, aes(x = Age, y = fct_reorder(PA, Age), fill = region_type)) +\n  geom_boxplot() +\n  facet_wrap(~ region_type, scales = \"free_y\") +\n  labs(\n    title = \"Age Distribution by Planning Area and Region\",\n    x = \"Age\",\n    y = \"Planning Area\"\n  ) +\n  theme_minimal()\n\np1 / p2 +\n  plot_annotation(title = \"Overview: Regional and Planning Area Age Distribution\")\n\n\n\n\n\n\n\n\n\nThis set of charts aims to present the age structure of the population across different areas of Singapore at both the regional (Region) and planning area (Planning Area) levels.\n\nGood pointsMakeover points\n\n\n\nClear hierarchical structure display : the data is divided into two levels (Region and Planning Area), helping readers understand the population structure from a macro to a micro perspective.\nConsistent color scheme : the same color is used to represent the same region, making it easier for readers to transition from the top chart to the bottom chart (e.g., pink for West Region, green for North Region).\nEffective use of space : by arranging the small charts in columns, horizontal space is fully utilized, delivering a large amount of information without appearing cluttered.\nBoxplots enhance statistical insight : each boxplot provides information on the median, quartiles, and outliers, making the distribution characteristics of the data clear at a glance.\nStrong comparative capability : the top chart allows for horizontal comparison across regions, while the bottom chart supports vertical comparison within regions, enabling multi-dimensional analysis.\n\n\n\nClarity\n\nImproves data richness and interpretability : the current chart type is relatively simple; it can be made more informative by incorporating distribution plots such as density or overlaying median lines.\nHelps users understand key metrics at a glance : the boxplots do not explicitly display statistical indicators. Adding a median ect. reference information would improve clarity and interpretability.\nSupports intuitive comparison across categories : if the plots are grouped by region, a side-by-side (faceted) layout would enhance cross-regional comparisons.\n\nAesthetics\n\nReduces clutter and improves visual balance:the legends can be consolidated—retaining just one main legend would simplify the visual presentation.\nEnhances overall design appeal and coherence:The color palette could be optimized by adopting a magazine-style or publication-friendly aesthetic for a more polished and professional look.\n\n\n\n\n\n\nCode-Makeover Plot 2\nexpanded_data &lt;- data %&gt;%\n  filter(!is.na(PA)) %&gt;%\n  mutate(Age = ifelse(Age == \"90_and_Over\", \"95\", Age),\n         Age = as.numeric(Age)) %&gt;%\n  filter(!is.na(Age)) %&gt;%\n  mutate(PA = str_trim(PA)) %&gt;%\n  mutate(region_type = case_when(\n    PA %in% c(\"Downtown Core\", \"Outram\", \"Sentosa\", \"Rochor\", \"Orchard\", \"Newton\",\n              \"River Valley\", \"Bukit Timah\", \"Holland Road\", \"Tanglin\", \"Novena\", \"Thomson\") ~ \"Core Central Region\",\n    \n    PA %in% c(\"Bedok\", \"Changi\", \"Changi Bay\", \"Paya Lebar\", \"Pasir Ris\", \"Tampines\") ~ \"East Region\",\n    \n    PA %in% c(\"Central Water Catchment\", \"Lim Chu Kang\", \"Mandai\", \"Sembawang\", \"Simpang\", \"Sungei Kadut\", \"Woodlands\", \"Yishun\") ~ \"North Region\",\n    \n    PA %in% c(\"Ang Mo Kio\", \"Hougang\", \"North-Eastern Islands\", \"Punggol\", \"Seletar\", \"Sengkang\", \"Serangoon\") ~ \"North-East Region\",\n    \n    PA %in% c(\"Bishan\", \"Bukit Merah\", \"Geylang\", \"Kallang\", \"Marine Parade\", \"Queenstown\", \"Southern Islands\", \"Toa Payoh\") ~ \"Rest of Central Region\",\n    \n    PA %in% c(\"Bukit Batok\", \"Bukit Panjang\", \"Boon Lay\", \"Pioneer\", \"Choa Chu Kang\", \"Clementi\", \"Jurong East\", \"Jurong West\", \"Tengah\", \"Tuas\", \"Western Islands\", \"Western Water Catchment\") ~ \"West Region\",\n    TRUE ~ NA_character_\n  )) %&gt;%\n  filter(!is.na(region_type)) %&gt;%\n  uncount(weights = Pop) %&gt;%\n  mutate(region_type = factor(region_type, levels = c(\"Core Central Region\",\"East Region\", \"North Region\",\"North-East Region\",\"Rest of Central Region\",\"West Region\" ))) \n\nregion_colors &lt;- c(\n  \"Core Central Region\" = \"#E07B91\",\n  \"East Region\" = \"#D7B45A\",\n  \"North Region\" = \"#60B15A\",\n  \"North-East Region\" = \"#4BC1C1\",\n  \"Rest of Central Region\" = \"#6598EA\",\n  \"West Region\" = \"#DA8AE0\"\n)\n\noverall_median &lt;- median(expanded_data$Age, na.rm = TRUE)\n\nP4 &lt;- ggplot(expanded_data, aes(x = fct_reorder(PA, Age), y = Age, fill = region_type)) +\n  geom_boxplot(outlier.size = 0.8, width = 0.6, alpha = 0.6) +\n  facet_wrap(~ region_type, scales = \"free_x\", nrow = 1) +\n  geom_hline(aes(yintercept = overall_median, color = \"Median\"), linetype = \"dashed\", linewidth = 0.8) +\n  labs(title = \"Age Distribution by Subzones (2024)\", x = \"Planning Areas\", y = \"Age\") +\n  \n  scale_fill_manual(\n    values = region_colors,\n    guide = guide_legend(order = 1)\n  ) +\n  scale_color_manual(\n    name = NULL,\n    values = c(\"Median\" = \"red\"),\n    labels = paste0(\"National Median Age = \", overall_median),\n    guide = guide_legend(order = 2)\n  ) +\n  \n  theme_minimal(base_size = 11) +\n  theme(\n    axis.text.x = element_text(angle = 60, hjust = 0.9, face = \"bold\"),\n    legend.position = \"bottom\",\n    legend.title = element_blank(),\n    legend.spacing.x = unit(1.5, \"cm\"),\n    legend.text = element_text(size = 10),\n    legend.box = \"horizontal\",\n    panel.spacing = unit(1, \"lines\")\n  )\n\n\n\nstats &lt;- expanded_data %&gt;%\n  group_by(region_type) %&gt;%\n  summarise(\n    Min = min(Age),\n    Q1 = quantile(Age, 0.25),\n    Median = median(Age),\n    Q3 = quantile(Age, 0.75),\n    Max = max(Age)\n  ) %&gt;%\n  pivot_longer(cols = c(Min, Q1, Median, Q3, Max), names_to = \"stat\", values_to = \"value\") %&gt;%\n  mutate(label = paste0(stat, \": \", round(value, 1)))\n\nstats$region_type &lt;- factor(stats$region_type, levels = levels(expanded_data$region_type))\n\n\nP5 &lt;- ggplot(expanded_data, aes(x = region_type, y = Age, fill = region_type)) +\n  geom_half_violin(side = \"r\", alpha = 0.3, color = NA, trim = FALSE) +\n  geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.6) +\n  geom_text(\n    data = stats,\n    aes(x = region_type, y = value, label = label),\n    inherit.aes = FALSE,\n    size = 4,\n    hjust = 1.4\n  ) +\n  scale_fill_manual(values = region_colors) +\n  labs(\n    title = \"Age Distribution by Region (2024)\",\n    x= NULL,\n    y = \"Age\"\n  ) +\n  theme_minimal(base_size = 11) +\n  theme(\n    legend.position = \"none\",\n    axis.text.x = element_blank(),\n    strip.text = element_blank()\n  ) +\n  coord_cartesian(clip = \"off\")\n\nfinal_plot &lt;- (P5 / P4) +\n  plot_layout(heights = c(2, 1)) +\n  plot_annotation(\n    title = \"Age Distribution Across Regions and Planning Areas in Singapore (2024)\",\n    theme = theme(plot.title = element_text(size = 16, face = \"bold\"))\n  )\n\nprint(final_plot)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOverall Value to the Reader after improvement\n\n\n\n\nClear understanding of region-to-subregion age structure hierarchy\nEasy identification of age distribution shape and spread differences\nImmediate recognition of deviation from national norms\n\n\n\n\n\n\n\nAfter virewing some classmates visualisation,I want to share four key principles to keep in mind to ensure that our visualization is clear, insightful, and effective in communicating data:\n\nPurpose\n\nEvery chart should serve a clear purpose. Focus on what we want the viewer to take away—select the appropriate chart type, avoid unnecessary complexity, and emphasize the key insight the chart is meant to reveal.\nClarity & Accuracy\n\nEnsure our chart includes clear titles, well-defined terms, and meaningful reference lines. Metrics should be accurate and relevant, helping viewers understand the data without confusion.\nReadability & Insight\n\nArrange the chart to guide the viewer’s eye—use logical sorting, highlight important values, and ensure adequate spacing. Group comparisons should be easy to follow and visually intuitive.\nAesthetics\n\nChoose a color palette that is visually comfortable and accessible. Maintain layout balance, ensure font clarity, and avoid clutter. Good design not only looks professional but also supports comprehension.",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1B"
    ]
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01B.html#overview",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01B.html#overview",
    "title": "Take Home Exercise1B",
    "section": "",
    "text": "A local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.\n\n\n\nIn this take-home exercise, we are required to:\n\nSelecting one submission provided by our classmate,\ncritic three good design principles and three areas for further improvement.\nWith reference to the comment, prepare the makeover version of the data visualisation.\nI will use clarity and aesthetics as criteria to comment on my classmate’s work.\n\n\n\n\n\n\nCriteria for criticism—clarity or aesthetics?\n\n\n\nThe original visualisation can be found in this link",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1B"
    ]
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01B.html#set-up",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01B.html#set-up",
    "title": "Take Home Exercise1B",
    "section": "",
    "text": "We will now set up according to the original code provided in the link.\nThe following packages are used for data wrangling and visualization:\n\ntidyverse: A collection of R packages for data science, including dplyr, ggplot2, and others for data manipulation and visualization.\nggplot2: A grammar of graphics for creating static, animated, and interactive data visualizations.\ndplyr: Provides a set of functions for efficiently manipulating datasets (e.g., filtering, selecting, and summarising).\nforcats: Tools for working with categorical variables (factors), especially useful for reordering and relabeling.\nggthemes: Offers additional themes and scales to improve the aesthetics of ggplot2 charts.\npatchwork: Enables combining multiple ggplot2 plots into a single layout.\nknitr: Facilitates dynamic report generation by weaving R code into documents.\ngt: Used to create elegant tables for display in HTML or markdown reports.\n\nThe following code chunk uses p_load () of pacman packages to check if tidyverse packages are installed and can be called into R.\n\npacman::p_load(tidyverse, ggplot2, dplyr, forcats, ggthemes, patchwork, knitr, gt,scales,gghalves,ggdist,ggforce)",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1B"
    ]
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01B.html#data-preparation",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01B.html#data-preparation",
    "title": "Take Home Exercise1B",
    "section": "",
    "text": "This dataset stores “90_and_Over” as a character value in the Age column, we need to clean and convert it to a numeric value to perform age-based analysis. We use 95 as a conservative numeric replacement.\n\ndata &lt;- read_csv(\"Data/respopagesex2024.csv\") %&gt;%\n  mutate(Age = ifelse(Age == \"90_and_Over\", \"95\", Age),\n         Age = as.numeric(Age)) %&gt;%\n  drop_na(Age)\n\n\n\n\n\nsum(duplicated(data))\n\n[1] 0\n\n\n\n\n\n\ngrouped &lt;- data %&gt;%\n  select(PA, SZ) %&gt;%\n  distinct() %&gt;%\n  arrange(PA, SZ) %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Subzones = paste(SZ, collapse = \", \"))\n\ngrouped %&gt;%\n  gt() %&gt;%\n  tab_header(\n    title = \"Planning Areas and Their Subzones\"\n  )",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1B"
    ]
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01B.html#the-original-data-visualisation-1",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01B.html#the-original-data-visualisation-1",
    "title": "Take Home Exercise1B",
    "section": "",
    "text": "Code-Original Plot 1\nage_groups &lt;- data %&gt;%\n  filter(Age &lt;= 14 | Age &gt;= 65) %&gt;%\n  mutate(group = case_when(\n    Age &lt;= 14 ~ \"Young\",\n    Age &gt;= 65 ~ \"Aging\"\n  )) %&gt;%\n  group_by(PA, group) %&gt;%\n  summarise(total_pop = sum(Pop), .groups = \"drop\")\n\ntop_pa &lt;- age_groups %&gt;%\n  group_by(PA) %&gt;%\n  summarise(total = sum(total_pop)) %&gt;%\n  arrange(desc(total)) %&gt;%\n  slice_head(n = 20)  # select top 20\n\ntop_age_groups &lt;- age_groups %&gt;%\n  filter(PA %in% top_pa$PA)\n\n# Define the order (e.g. by total population descending)\npa_order &lt;- top_age_groups %&gt;%\n  group_by(PA) %&gt;%\n  summarise(total = sum(total_pop)) %&gt;%\n  arrange(desc(total)) %&gt;%\n  pull(PA)\n\n# Apply the same factor levels\ntop_age_groups &lt;- top_age_groups %&gt;%\n  mutate(PA = factor(PA, levels = pa_order))\n\nratio_data &lt;- age_groups %&gt;%\n  filter(PA %in% top_pa$PA) %&gt;%\n  pivot_wider(names_from = group, values_from = total_pop) %&gt;%\n  mutate(ratio = Aging / Young) %&gt;%\n  filter(!is.na(PA)) %&gt;%  # Remove NAs\n  mutate(PA = factor(PA, levels = pa_order))\n\n# Top bar chart\nbar_plot &lt;- ggplot(top_age_groups, aes(x = total_pop, y = fct_rev(PA), fill = group)) +\n  geom_col(position = \"dodge\") +\n  labs(x = \"Population\", y = NULL, fill = \"Age Group\") +\n  theme_minimal()\n\n# Bottom line chart with consistent PA order\nline_plot &lt;- ggplot(ratio_data, aes(x = PA, y = ratio)) +\n  geom_point(size = 3, color = \"black\") +\n  geom_line(aes(group = 1), color = \"black\") +\n  labs(x = \"Planning Area\", y = \"Aging / Young Ratio\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Combine them\n(bar_plot / line_plot) + plot_layout(heights = c(2, 1)) +\n  plot_annotation(title = \"Population Distribution and Aging Ratio by Planning Area\")\n\n\n\n\n\n\n\n\n\nThe combination of the plots reflect both absolute population numbers and structural proportions by top 20 region.\n\nGood pointsMakeover points\n\n\n1.The classmate selected the top 20 most relevant regions to display insights more clearly. In her original population chart, some of the population gaps between regions were so large that it was difficult to interpret the bar values. Focusing on the top 20 regions helps highlight the key areas and improves readability\n2.The basic color pairing (red vs. teal) effectively distinguishes the two age groups, allowing readers to quickly understand the meaning without much effort.the basic color pairing (red vs. teal) effectively distinguishes the two age groups, allowing readers to quickly understand the meaning without much effort.\n3.Using horizontal bar charts and applying a 45-degree tilt to the labels in the lower chart improves clarity, especially for long region names. While reviewing other classmates’ charts, I noticed that vertical text labels were often hard to read. This layout enhances accessibility and viewer experience.\n4.The aging-to-young ratio is a meaningful indicator that reflects the structural skew of the population. It helps identify whether a region is dominated by an aging population or has a relatively younger demographic, providing useful context for planning and policy decisions.\n\n\nThe bar chart:\nClarity:\n\nEnsure correct initial interpretation of the chart:the upper plot would benefit from a clearer title, as the current layout may cause confusion—viewers might initially think the bar chart represents the aging-to-young ratio.\nSeparates the focus areas and avoids misinterpretation:to improve clarity, it’s advisable to include both a main title and distinct subtitles for the two charts.\nImproves user navigation and insight extraction:sorting the bars by total or aging population would enhance readability and help viewers identify key regions more easily.\nProvides exact values and supports better comprehension:It would be beneficial to include data labels on the bars.\nMakes age group definitions explicit and avoids ambiguity : Add a legend label like: “Aging = 65 and above”.\n\nAesthetics:\n\nReduces visual density and makes the plot more digestible:The physical spacing between grouped bars could be adjusted to reduce clutter and improve visual clarity.\nImproves inclusivity and visual distinction:Consider enhancing the legend or replacing colors with more accessible alternatives.\nImproves user comfort and aesthetic appeal:The colour here is too glaring. We need to adjust the colour depth or transparency to make the plot more comfortable and readable for readers.\n\nThe ratio plot\nClarity:\n\nAdd a Structural Reference Line: The current chart lacks a visual indicator to help interpret what constitutes a “balanced” aging structure. Adding a horizontal line at y = 1, labeled as “Balanced Ratio” or “1.0 Threshold”, would make it clear that a ratio above 1 indicates the elderly population exceeds the youth population.\nHighlight Extreme Values:Certain regions such as Punggol (lowest ratio) and Ang Mo Kio (highest ratio) show significant extremes but are not explicitly emphasized. These key points could be highlighted using different colors or text annotations, such as “Highest: Ang Mo Kio (Ratio = 2.2)”, to draw attention and enhance insight.\nEnhance Axis Labels and Styling:The current Y-axis uses plain numeric values (e.g., 0.5 to 2.0) without explanation. It should be relabeled as “Aging-to-Young Ratio (Elderly / Youth)”, and a subtitle like “Ratio above 1.0 indicates elderly outnumber youth” can provide context.\n\nAesthetics:\n\nVisual Styling for Reference and Highlights:Replacing the plain black reference line with a blue gradient and using red highlights for extreme points would improve both aesthetic appeal and clarity.\n\n\n\n\n\n\nCode-Makeover Plot 2\n# Data preprocessing\nage_groups &lt;- data %&gt;%\n  filter(Age &lt;= 14 | Age &gt;= 65) %&gt;%\n  mutate(group = case_when(\n    Age &lt;= 14 ~ \"Young\",\n    Age &gt;= 65 ~ \"Aging\"\n  )) %&gt;%\n  group_by(PA, group) %&gt;%\n  summarise(total_pop = sum(Pop), .groups = \"drop\")\n\n# Sort by elderly population and select the top 20 PAs\ntop_pa &lt;- age_groups %&gt;%\n  filter(group == \"Aging\") %&gt;%\n  arrange(desc(total_pop)) %&gt;%\n  slice_head(n = 20) %&gt;%\n  pull(PA)\n\n# Create top_age_groups\ntop_age_groups &lt;- age_groups %&gt;%\n  filter(PA %in% top_pa)\n\n# Sort order: By elderly population\npa_order &lt;- top_age_groups %&gt;%\n  filter(group == \"Aging\") %&gt;%\n  arrange(desc(total_pop)) %&gt;%\n  pull(PA)\n\n# Apply factor levels for consistent plotting\ntop_age_groups &lt;- top_age_groups %&gt;%\n  mutate(PA = factor(PA, levels = pa_order))\n\n# Calculate national averages\navg_pop &lt;- mean(age_groups$total_pop)\n\navg_aging_pop &lt;- age_groups %&gt;%\n  filter(group == \"Aging\") %&gt;%\n  summarise(mean_pop = mean(total_pop)) %&gt;%\n  pull(mean_pop)\n\navg_young_pop &lt;- age_groups %&gt;%\n  filter(group == \"Young\") %&gt;%\n  summarise(mean_pop = mean(total_pop)) %&gt;%\n  pull(mean_pop)\n\n# Calculate aging-to-young ratio for top PAs\nratio_data &lt;- age_groups %&gt;%\n  filter(PA %in% top_pa) %&gt;%\n  pivot_wider(names_from = group, values_from = total_pop) %&gt;%\n  mutate(ratio = Aging / Young) %&gt;%\n  filter(!is.na(PA)) %&gt;%\n  mutate(PA = factor(PA, levels = pa_order))\n\n# Extreme value labels\nmax_label &lt;- ratio_data %&gt;% slice_max(ratio, n = 1)\nmin_label &lt;- ratio_data %&gt;% slice_min(ratio, n = 1)\nnon_extreme &lt;- ratio_data %&gt;%\n  filter(!(PA %in% c(max_label$PA, min_label$PA)))\n\n# Top Bar Chart\nbar_plot &lt;- ggplot(top_age_groups, aes(x = total_pop, y = PA, fill = group)) +\n  geom_col(position = position_dodge(width = 0.6), width = 0.5, alpha = 0.85) +\n  geom_text(aes(label = comma(total_pop)), \n            position = position_dodge(width = 0.9), \n            hjust = -0.1, size = 3) +\n  geom_vline(xintercept = avg_aging_pop, linetype = \"dashed\", color = \"#29B4B6\", size = 0.6) +\n  geom_vline(xintercept = avg_young_pop, linetype = \"dashed\", color = \"#F0776D\", size = 0.6) +\n  scale_fill_manual(\n    values = c(\"Young\" = \"#F0776D\", \"Aging\" = \"#29B4B6\"),\n    name = \"Age Group\",\n    labels = c(\"Aging = 65 and above\", \"Young = 0–14\")\n  ) +\n  labs(\n    x = \"Population\", \n    y = NULL,\n    title = \"Distribution of Aging vs. Young Population and Dependency Ratio across SG Planning Areas (2024)\",\n    subtitle = paste0(\n      \"Top 20 Planning Areas by Aging Population\\n\",\n      \"Dashed lines: National Average — Aging (\", comma(round(avg_aging_pop)), \n      \"), Young (\", comma(round(avg_young_pop)), \")\"\n    )\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    legend.position = \"bottom\",\n    plot.subtitle = element_text(size = 11)\n  )\n\n# Ratio Plot\nline_plot &lt;- ggplot(ratio_data, aes(x = PA, y = ratio)) +\n  geom_hline(yintercept = 1, linetype = \"dashed\", color = \"grey40\") +\n  geom_line(aes(group = 1), color = \"steelblue\") +\n  geom_point(size = 3, color = \"steelblue\") +\n  geom_text(data = max_label, aes(label = paste0(\"Highest: \", PA, \" (\", round(ratio, 2), \")\")),\n            vjust = -1.2, color = \"red\", size = 3.5,hjust = 1,          \n          nudge_x = -0.5,nudge_y=-0.2) +\n  geom_text(data = min_label, aes(label = paste0(\"Lowest: \", PA, \" (\", round(ratio, 2), \")\")),\n            vjust = 1.8, color = \"red\", size = 3.5) +\n  geom_text(data = non_extreme, \n          aes(label = round(ratio, 2)), \n          hjust = 0,nudge_x = 0.3, size = 3, color = \"black\")+\n  scale_y_continuous(name = \"Aging-to-Young Ratio (Elderly / Youth)\", limits = c(0, NA)) +\n  labs(x = \"Planning Area\",\n       subtitle = \"Aging-to-Young Population Ratio (Ratio &gt; 1: Elderly Outnumber Youth)\") +\n  theme_minimal(base_size = 12) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Combine plots with improved title\nfinal_plot &lt;- (bar_plot / line_plot) +\n  plot_layout(heights = c(2, 1)) +\n  plot_annotation(\n    title = \"Aging and Youth Population Structure across Singapore Planning Areas (2024)\",\n    theme = theme(plot.title = element_text(size = 15, face = \"bold\"))\n  )\n\nprint(final_plot)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOverall Value to the Reader after improvement\n\n\n\n\nComparability: Enables direct comparisons between regions vs. national average and elderly vs. youth populations\nSorted structure: Helps highlight priority areas with the highest aging population\nClear information hierarchy: Presents both population distribution (bar chart) and structural insights (aging-to-youth ratio line chart)\nIf the goal is to inform policy decisions, guide resource allocation, or highlight the severity of aging issues, Improvement Figure which with more information is better suited as the main visualization.\n\n\n\n\n\n\n\n\nCode-Original Plot 2\nexpanded_data &lt;- data %&gt;%\n  filter(!is.na(PA)) %&gt;%\n  mutate(Age = ifelse(Age == \"90_and_Over\", \"95\", Age),\n         Age = as.numeric(Age)) %&gt;%\n  filter(!is.na(Age)) %&gt;%\n  mutate(PA = str_trim(PA)) %&gt;%\n  mutate(region_type = case_when(\n    # Core Central Region\n    PA %in% c(\"Downtown Core\", \"Outram\", \"Sentosa\", \"Rochor\", \"Orchard\", \"Newton\",\n              \"River Valley\", \"Bukit Timah\", \"Holland Road\", \"Tanglin\", \"Novena\", \"Thomson\") ~ \"Core Central Region \",\n    \n    # Rest of Central Region\n    PA %in% c(\"Bishan\", \"Bukit Merah\", \"Geylang\", \"Kallang\", \"Marine Parade\", \"Queenstown\", \"Southern Islands\", \"Toa Payoh\") ~ \"Rest of Central Region \",\n    \n    # North Region\n    PA %in% c(\"Central Water Catchment\", \"Lim Chu Kang\", \"Mandai\", \"Sembawang\", \"Simpang\", \"Sungei Kadut\", \"Woodlands\", \"Yishun\") ~ \"North Region \",\n    \n    # North-East Region\n    PA %in% c(\"Ang Mo Kio\", \"Hougang\", \"North-Eastern Islands\", \"Punggol\", \"Seletar\",\n              \"Sengkang\", \"Serangoon\") ~ \"North-East Region \",\n    \n    # East Region\n    PA %in% c(\"Bedok\", \"Changi\", \"Changi Bay\", \"Paya Lebar\", \"Pasir Ris\", \"Tampines\") ~ \"East Region \",\n    \n    # West Region\n    PA %in% c(\"Bukit Batok\", \"Bukit Panjang\", \"Boon Lay\", \"Pioneer\", \"Choa Chu Kang\", \"Clementi\", \"Jurong East\", \"Jurong West\", \"Tengah\", \"Tuas\", \"Western Islands\", \"Western Water Catchment\") ~ \"West Region \",\n    TRUE ~ NA_character_\n  )) %&gt;%\n  filter(!is.na(region_type)) %&gt;%\n  uncount(weights = Pop)\n\np1 &lt;- ggplot(expanded_data, aes(x = region_type, y = Age, fill = region_type)) +\n  geom_boxplot() +\n  labs(title = \"Age Distribution by Region Type\", x = \"Region\", y = \"Age\") +\n  theme_minimal() +\n  coord_flip()\n\np2 &lt;- ggplot(expanded_data, aes(x = Age, y = fct_reorder(PA, Age), fill = region_type)) +\n  geom_boxplot() +\n  facet_wrap(~ region_type, scales = \"free_y\") +\n  labs(\n    title = \"Age Distribution by Planning Area and Region\",\n    x = \"Age\",\n    y = \"Planning Area\"\n  ) +\n  theme_minimal()\n\np1 / p2 +\n  plot_annotation(title = \"Overview: Regional and Planning Area Age Distribution\")\n\n\n\n\n\n\n\n\n\nThis set of charts aims to present the age structure of the population across different areas of Singapore at both the regional (Region) and planning area (Planning Area) levels.\n\nGood pointsMakeover points\n\n\n\nClear hierarchical structure display : the data is divided into two levels (Region and Planning Area), helping readers understand the population structure from a macro to a micro perspective.\nConsistent color scheme : the same color is used to represent the same region, making it easier for readers to transition from the top chart to the bottom chart (e.g., pink for West Region, green for North Region).\nEffective use of space : by arranging the small charts in columns, horizontal space is fully utilized, delivering a large amount of information without appearing cluttered.\nBoxplots enhance statistical insight : each boxplot provides information on the median, quartiles, and outliers, making the distribution characteristics of the data clear at a glance.\nStrong comparative capability : the top chart allows for horizontal comparison across regions, while the bottom chart supports vertical comparison within regions, enabling multi-dimensional analysis.\n\n\n\nClarity\n\nImproves data richness and interpretability : the current chart type is relatively simple; it can be made more informative by incorporating distribution plots such as density or overlaying median lines.\nHelps users understand key metrics at a glance : the boxplots do not explicitly display statistical indicators. Adding a median ect. reference information would improve clarity and interpretability.\nSupports intuitive comparison across categories : if the plots are grouped by region, a side-by-side (faceted) layout would enhance cross-regional comparisons.\n\nAesthetics\n\nReduces clutter and improves visual balance:the legends can be consolidated—retaining just one main legend would simplify the visual presentation.\nEnhances overall design appeal and coherence:The color palette could be optimized by adopting a magazine-style or publication-friendly aesthetic for a more polished and professional look.\n\n\n\n\n\n\nCode-Makeover Plot 2\nexpanded_data &lt;- data %&gt;%\n  filter(!is.na(PA)) %&gt;%\n  mutate(Age = ifelse(Age == \"90_and_Over\", \"95\", Age),\n         Age = as.numeric(Age)) %&gt;%\n  filter(!is.na(Age)) %&gt;%\n  mutate(PA = str_trim(PA)) %&gt;%\n  mutate(region_type = case_when(\n    PA %in% c(\"Downtown Core\", \"Outram\", \"Sentosa\", \"Rochor\", \"Orchard\", \"Newton\",\n              \"River Valley\", \"Bukit Timah\", \"Holland Road\", \"Tanglin\", \"Novena\", \"Thomson\") ~ \"Core Central Region\",\n    \n    PA %in% c(\"Bedok\", \"Changi\", \"Changi Bay\", \"Paya Lebar\", \"Pasir Ris\", \"Tampines\") ~ \"East Region\",\n    \n    PA %in% c(\"Central Water Catchment\", \"Lim Chu Kang\", \"Mandai\", \"Sembawang\", \"Simpang\", \"Sungei Kadut\", \"Woodlands\", \"Yishun\") ~ \"North Region\",\n    \n    PA %in% c(\"Ang Mo Kio\", \"Hougang\", \"North-Eastern Islands\", \"Punggol\", \"Seletar\", \"Sengkang\", \"Serangoon\") ~ \"North-East Region\",\n    \n    PA %in% c(\"Bishan\", \"Bukit Merah\", \"Geylang\", \"Kallang\", \"Marine Parade\", \"Queenstown\", \"Southern Islands\", \"Toa Payoh\") ~ \"Rest of Central Region\",\n    \n    PA %in% c(\"Bukit Batok\", \"Bukit Panjang\", \"Boon Lay\", \"Pioneer\", \"Choa Chu Kang\", \"Clementi\", \"Jurong East\", \"Jurong West\", \"Tengah\", \"Tuas\", \"Western Islands\", \"Western Water Catchment\") ~ \"West Region\",\n    TRUE ~ NA_character_\n  )) %&gt;%\n  filter(!is.na(region_type)) %&gt;%\n  uncount(weights = Pop) %&gt;%\n  mutate(region_type = factor(region_type, levels = c(\"Core Central Region\",\"East Region\", \"North Region\",\"North-East Region\",\"Rest of Central Region\",\"West Region\" ))) \n\nregion_colors &lt;- c(\n  \"Core Central Region\" = \"#E07B91\",\n  \"East Region\" = \"#D7B45A\",\n  \"North Region\" = \"#60B15A\",\n  \"North-East Region\" = \"#4BC1C1\",\n  \"Rest of Central Region\" = \"#6598EA\",\n  \"West Region\" = \"#DA8AE0\"\n)\n\noverall_median &lt;- median(expanded_data$Age, na.rm = TRUE)\n\nP4 &lt;- ggplot(expanded_data, aes(x = fct_reorder(PA, Age), y = Age, fill = region_type)) +\n  geom_boxplot(outlier.size = 0.8, width = 0.6, alpha = 0.6) +\n  facet_wrap(~ region_type, scales = \"free_x\", nrow = 1) +\n  geom_hline(aes(yintercept = overall_median, color = \"Median\"), linetype = \"dashed\", linewidth = 0.8) +\n  labs(title = \"Age Distribution by Subzones (2024)\", x = \"Planning Areas\", y = \"Age\") +\n  \n  scale_fill_manual(\n    values = region_colors,\n    guide = guide_legend(order = 1)\n  ) +\n  scale_color_manual(\n    name = NULL,\n    values = c(\"Median\" = \"red\"),\n    labels = paste0(\"National Median Age = \", overall_median),\n    guide = guide_legend(order = 2)\n  ) +\n  \n  theme_minimal(base_size = 11) +\n  theme(\n    axis.text.x = element_text(angle = 60, hjust = 0.9, face = \"bold\"),\n    legend.position = \"bottom\",\n    legend.title = element_blank(),\n    legend.spacing.x = unit(1.5, \"cm\"),\n    legend.text = element_text(size = 10),\n    legend.box = \"horizontal\",\n    panel.spacing = unit(1, \"lines\")\n  )\n\n\n\nstats &lt;- expanded_data %&gt;%\n  group_by(region_type) %&gt;%\n  summarise(\n    Min = min(Age),\n    Q1 = quantile(Age, 0.25),\n    Median = median(Age),\n    Q3 = quantile(Age, 0.75),\n    Max = max(Age)\n  ) %&gt;%\n  pivot_longer(cols = c(Min, Q1, Median, Q3, Max), names_to = \"stat\", values_to = \"value\") %&gt;%\n  mutate(label = paste0(stat, \": \", round(value, 1)))\n\nstats$region_type &lt;- factor(stats$region_type, levels = levels(expanded_data$region_type))\n\n\nP5 &lt;- ggplot(expanded_data, aes(x = region_type, y = Age, fill = region_type)) +\n  geom_half_violin(side = \"r\", alpha = 0.3, color = NA, trim = FALSE) +\n  geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.6) +\n  geom_text(\n    data = stats,\n    aes(x = region_type, y = value, label = label),\n    inherit.aes = FALSE,\n    size = 4,\n    hjust = 1.4\n  ) +\n  scale_fill_manual(values = region_colors) +\n  labs(\n    title = \"Age Distribution by Region (2024)\",\n    x= NULL,\n    y = \"Age\"\n  ) +\n  theme_minimal(base_size = 11) +\n  theme(\n    legend.position = \"none\",\n    axis.text.x = element_blank(),\n    strip.text = element_blank()\n  ) +\n  coord_cartesian(clip = \"off\")\n\nfinal_plot &lt;- (P5 / P4) +\n  plot_layout(heights = c(2, 1)) +\n  plot_annotation(\n    title = \"Age Distribution Across Regions and Planning Areas in Singapore (2024)\",\n    theme = theme(plot.title = element_text(size = 16, face = \"bold\"))\n  )\n\nprint(final_plot)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOverall Value to the Reader after improvement\n\n\n\n\nClear understanding of region-to-subregion age structure hierarchy\nEasy identification of age distribution shape and spread differences\nImmediate recognition of deviation from national norms",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1B"
    ]
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01B.html#conclusion",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01B.html#conclusion",
    "title": "Take Home Exercise1B",
    "section": "",
    "text": "After virewing some classmates visualisation,I want to share four key principles to keep in mind to ensure that our visualization is clear, insightful, and effective in communicating data:\n\nPurpose\n\nEvery chart should serve a clear purpose. Focus on what we want the viewer to take away—select the appropriate chart type, avoid unnecessary complexity, and emphasize the key insight the chart is meant to reveal.\nClarity & Accuracy\n\nEnsure our chart includes clear titles, well-defined terms, and meaningful reference lines. Metrics should be accurate and relevant, helping viewers understand the data without confusion.\nReadability & Insight\n\nArrange the chart to guide the viewer’s eye—use logical sorting, highlight important values, and ensure adequate spacing. Group comparisons should be easy to follow and visually intuitive.\nAesthetics\n\nChoose a color palette that is visually comfortable and accessible. Maintain layout balance, ensure font clarity, and avoid clutter. Good design not only looks professional but also supports comprehension.",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1B"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03B.html",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03B.html",
    "title": "Hands-on Exercise3B",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, we will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, we will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.\n\n\n\n\n\n\n\n\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"chap03/data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\n\n\n\n\n\n\n\n\n\n\n\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp\n\n\n\n\n\n\n\n\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3B"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03B.html#overview",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03B.html#overview",
    "title": "Hands-on Exercise3B",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, we will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, we will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3B"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03B.html#getting-started",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03B.html#getting-started",
    "title": "Hands-on Exercise3B",
    "section": "",
    "text": "First, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"chap03/data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3B"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03B.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03B.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on Exercise3B",
    "section": "",
    "text": "gganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3B"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03B.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03B.html#animated-data-visualisation-plotly",
    "title": "Hands-on Exercise3B",
    "section": "",
    "text": "In Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3B"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03B.html#reference",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03B.html#reference",
    "title": "Hands-on Exercise3B",
    "section": "",
    "text": "Getting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3B"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04C.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04C.html",
    "title": "Hands-on_Ex04C",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter you will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package.\n\n\n\n\n\n\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nA point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\n\n\n\n\n\n\nImportant\n\n\n\n\nDon’t confuse the uncertainty of a point estimate with the variation in the sample\n\n\n\nIn this section, you will learn how to plot error bars of maths scores by race by using data provided in exam tibble data frame.\nFirstly, code chunk below will be used to derive the necessary summary statistics.\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ngroup_by() of dplyr package is used to group the observation by RACE,\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive standard error of Maths by RACE, and\nthe output is save as a tibble data table called my_sum.\n\n\n\nNext, the code chunk below will be used to display my_sum tibble data frame in an html table format.\n\nThe codeThe Table\n\n\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\n\n\n\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”.\n\n\n\n\n\n\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label.\n\n\n\n\n\n\n\n\n\nIn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))\n\n\n\n\n\n\n\n\n\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist)\n\n\n\n\n\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\nFor example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n#95%-99%\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(\n    .width =c(0.95, 0.99),   \n    show.legend = FALSE\n  ) +\n  labs(\n    title = \"Visualising 95% and 99% Confidence Intervals of Mean Math Score\",\n    subtitle = \"Mean Point + Multiple-Interval Plot\",\n    x = \"Race\",\n    y = \"Math Score\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n#95%\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\n\n\n\nlibrary(ungeviz)\n\n\n\n\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4C"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#learning-outcome",
    "title": "Hands-on_Ex04C",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter you will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4C"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#getting-started",
    "title": "Hands-on_Ex04C",
    "section": "",
    "text": "For the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4C"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "Hands-on_Ex04C",
    "section": "",
    "text": "A point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\n\n\n\n\n\n\nImportant\n\n\n\n\nDon’t confuse the uncertainty of a point estimate with the variation in the sample\n\n\n\nIn this section, you will learn how to plot error bars of maths scores by race by using data provided in exam tibble data frame.\nFirstly, code chunk below will be used to derive the necessary summary statistics.\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ngroup_by() of dplyr package is used to group the observation by RACE,\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive standard error of Maths by RACE, and\nthe output is save as a tibble data table called my_sum.\n\n\n\nNext, the code chunk below will be used to display my_sum tibble data frame in an html table format.\n\nThe codeThe Table\n\n\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\n\n\n\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”.\n\n\n\n\n\n\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label.\n\n\n\n\n\n\n\n\n\nIn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4C"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#visualising-uncertainty-ggdist-package",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#visualising-uncertainty-ggdist-package",
    "title": "Hands-on_Ex04C",
    "section": "",
    "text": "ggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist)\n\n\n\n\n\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\nFor example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n#95%-99%\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(\n    .width =c(0.95, 0.99),   \n    show.legend = FALSE\n  ) +\n  labs(\n    title = \"Visualising 95% and 99% Confidence Intervals of Mean Math Score\",\n    subtitle = \"Mean Point + Multiple-Interval Plot\",\n    x = \"Race\",\n    y = \"Math Score\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n#95%\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4C"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "title": "Hands-on_Ex04C",
    "section": "",
    "text": "devtools::install_github(\"wilkelab/ungeviz\")\n\n\n\n\n\nlibrary(ungeviz)\n\n\n\n\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4C"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04A.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04A.html",
    "title": "Hands-on Ex4A",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions.\n\n\n\n\n\nFor the purpose of this exercise, the following R packages will be used, they are:\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\nggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,\ntidyverse, a family of R packages to meet the modern data science and visual communication needs,\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\ncolorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\nThe code chunk below will be used load these R packages into RStudio environment.\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nFigure below is a ridgelines plot showing the distribution of English score by class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\n\n\n\n\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\n\n\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\n\n\n\n\n\n\n\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, we will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n\n\n\n\n\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nThe plotThe code chunk\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\n\n\n\nReference\n\nIntroducing Ridgeline Plots (formerly Joyplots)\nClaus O. Wilke Fundamentals of Data Visualization especially Chapter 6, 7, 8, 9 and 10.\nAllen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63.\nDots + interval stats and geoms",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4A"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#learning-outcome",
    "title": "Hands-on Ex4A",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4A"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#getting-started",
    "title": "Hands-on Ex4A",
    "section": "",
    "text": "For the purpose of this exercise, the following R packages will be used, they are:\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\nggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,\ntidyverse, a family of R packages to meet the modern data science and visual communication needs,\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\ncolorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\nThe code chunk below will be used load these R packages into RStudio environment.\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4A"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#visualising-distribution-with-ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#visualising-distribution-with-ridgeline-plot",
    "title": "Hands-on Ex4A",
    "section": "",
    "text": "Figure below is a ridgelines plot showing the distribution of English score by class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\n\n\n\n\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\n\n\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4A"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#visualising-distribution-with-raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#visualising-distribution-with-raincloud-plot",
    "title": "Hands-on Ex4A",
    "section": "",
    "text": "Raincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, we will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n\n\n\n\n\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nThe plotThe code chunk\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\n\n\n\nReference\n\nIntroducing Ridgeline Plots (formerly Joyplots)\nClaus O. Wilke Fundamentals of Data Visualization especially Chapter 6, 7, 8, 9 and 10.\nAllen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63.\nDots + interval stats and geoms",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 4A"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "In this chapter, we will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, we will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package.\n\n\n\n\n\n\nIn this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse,grid,ggdist,\n               gridExtra,ggplot2) \n\n\n\n\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data &lt;- read_csv(\"Exam_data.csv\",show_col_types = FALSE)\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n\n\n\n\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_label_repel()\ngeom_label()\n\n\n\n\nAutomatically Avoid Overlap\nYes\nNo (labels may overlap)\n\n\nFont Style\nBold (fontface = \"bold\")\nDefault font\n\n\nLabel Position\nAutomatically calculated optimal position\nFixed position (centered horizontally, slightly above)\n\n\nAdaptability to Dense Points\nStrong\nWeak\n\n\nRequired Package\nRequires loading ggrepel package\nNo extra package required\n\n\n\n\n\n\n\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\nShow the code\nlibrary(ggplot2)\nlibrary(gridExtra)\n\nbase_plot &lt;- function(theme_func, title_text) {\n  ggplot(data = exam_data, aes(x = MATHS)) +\n    geom_histogram(bins = 20, boundary = 100, color = \"grey25\", fill = \"grey90\") +\n    theme_func() +\n    ggtitle(title_text)\n}\n\np1 &lt;- base_plot(theme_bw,        \"theme_bw()\")\np2 &lt;- base_plot(theme_classic,   \"theme_classic()\")\np3 &lt;- base_plot(theme_dark,      \"theme_dark()\")\np4 &lt;- base_plot(theme_light,     \"theme_light()\")\np5 &lt;- base_plot(theme_linedraw,  \"theme_linedraw()\")\np6 &lt;- base_plot(theme_minimal,   \"theme_minimal()\")\np7 &lt;- base_plot(theme_void,      \"theme_void()\")\n\ngrid.arrange(p1, p2, p3,\n             p4, p5, p6,\n             p7, nullGrob(), nullGrob(),\n             ncol = 3)\n\n\n\n\n\n\n\n\n\n\n\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhat can we learn from the code chunk above?\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines.\n\n\n\n\n\n\n\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, we will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\nNext\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\np2\n\n\n\n\nLastly, we will draw a scatterplot for English score versus Maths score by as shown below\n\n\nShow the code\np3 &lt;- ggplot(data=exam_data,\n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\") +\n  theme(plot.title = element_text(size = 11))\np3\n\n\n\n\n\n\n\n\n\n\n\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\n\nShow the code\np1 + p2\n\n\n\n\n\n\n\n\n\n\n\n\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\n\np1 + gt::gt(exam_data[1:10,  c(\"ID\", \"ENGLISH\", \"MATHS\")])\n\n\n\n\n\n\n\n\n\n\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\nChange the plot to the right bottom:\n\n\nShow the code\np3 + inset_element(p2, \n                   left = 0.5,   \n                   bottom = 0,    \n                   right = 0.98,  \n                   top = 0.3)     \n\n\n\n\n\n\n\n\n\n\n\n\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n\n\n\n\n\n\n\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam_data, aes(x = GENDER, y = ENGLISH)) +\n  geom_boxplot(fill = \"lightblue\") +\n  ggtitle(\"Boxplot of English Scores by Gender\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam_data, aes(x = GENDER, y = ENGLISH)) +\n  geom_violin(fill = \"plum\") +\n  ggtitle(\"Violin Plot of English Scores by Gender\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam_data, aes(x = GENDER, y = ENGLISH)) +\n  geom_boxplot(notch = TRUE, fill = \"lightcoral\") +\n  ggtitle(\"Notched Boxplot of English Scores by Gender\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam_data, aes(x = GENDER, y = ENGLISH)) +\n  geom_dotplot(binaxis = 'y', stackdir = 'center', dotsize = 0.7) +\n  ggtitle(\"Dot Plot of English Scores by Gender\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nlibrary(ggdist)\n\nggplot(exam_data, aes(x = GENDER, y = ENGLISH, fill = GENDER)) +\n  stat_halfeye(adjust = .5, width = .6, .width = 0, justification = -.2) +\n  geom_boxplot(width = .1, outlier.shape = NA, alpha = 0.5) +\n  geom_jitter(width = .05, alpha = 0.3) +\n  ggtitle(\"Raincloud Plot: English Scores by Gender\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nexam_data &lt;- exam_data %&gt;%\n  mutate(SCORE_LEVEL = ifelse(ENGLISH &gt;= mean(ENGLISH), \"Above\", \"Below\"))\n\nggplot(exam_data, aes(x = GENDER, fill = SCORE_LEVEL)) +\n  geom_bar(position = \"fill\") +\n  coord_flip() +\n  ggtitle(\"Diverging Stacked Bar: English Score Level by Gender\") +\n  scale_fill_manual(values = c(\"Above\" = \"skyblue\", \"Below\" = \"salmon\"))",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "In this chapter, we will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, we will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "In this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse,grid,ggdist,\n               gridExtra,ggplot2) \n\n\n\n\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data &lt;- read_csv(\"Exam_data.csv\",show_col_types = FALSE)\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "One of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_label_repel()\ngeom_label()\n\n\n\n\nAutomatically Avoid Overlap\nYes\nNo (labels may overlap)\n\n\nFont Style\nBold (fontface = \"bold\")\nDefault font\n\n\nLabel Position\nAutomatically calculated optimal position\nFixed position (centered horizontally, slightly above)\n\n\nAdaptability to Dense Points\nStrong\nWeak\n\n\nRequired Package\nRequires loading ggrepel package\nNo extra package required",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "ggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\")",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#other-theme-examples",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#other-theme-examples",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "Show the code\nlibrary(ggplot2)\nlibrary(gridExtra)\n\nbase_plot &lt;- function(theme_func, title_text) {\n  ggplot(data = exam_data, aes(x = MATHS)) +\n    geom_histogram(bins = 20, boundary = 100, color = \"grey25\", fill = \"grey90\") +\n    theme_func() +\n    ggtitle(title_text)\n}\n\np1 &lt;- base_plot(theme_bw,        \"theme_bw()\")\np2 &lt;- base_plot(theme_classic,   \"theme_classic()\")\np3 &lt;- base_plot(theme_dark,      \"theme_dark()\")\np4 &lt;- base_plot(theme_light,     \"theme_light()\")\np5 &lt;- base_plot(theme_linedraw,  \"theme_linedraw()\")\np6 &lt;- base_plot(theme_minimal,   \"theme_minimal()\")\np7 &lt;- base_plot(theme_void,      \"theme_void()\")\n\ngrid.arrange(p1, p2, p3,\n             p4, p5, p6,\n             p7, nullGrob(), nullGrob(),\n             ncol = 3)\n\n\n\n\n\n\n\n\n\n\n\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhat can we learn from the code chunk above?\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "It is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, we will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\nNext\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\np2\n\n\n\n\nLastly, we will draw a scatterplot for English score versus Maths score by as shown below\n\n\nShow the code\np3 &lt;- ggplot(data=exam_data,\n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\") +\n  theme(plot.title = element_text(size = 11))\np3\n\n\n\n\n\n\n\n\n\n\n\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\n\nShow the code\np1 + p2\n\n\n\n\n\n\n\n\n\n\n\n\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#adding-table",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#adding-table",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "p1 + gt::gt(exam_data[1:10,  c(\"ID\", \"ENGLISH\", \"MATHS\")])\n\n\n\n\n\n\n\n\n\n\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\nChange the plot to the right bottom:\n\n\nShow the code\np3 + inset_element(p2, \n                   left = 0.5,   \n                   bottom = 0,    \n                   right = 0.98,  \n                   top = 0.3)     \n\n\n\n\n\n\n\n\n\n\n\n\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "Patchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#visual-analytics-methods-of-the-week-2",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#visual-analytics-methods-of-the-week-2",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "Show the code\nggplot(exam_data, aes(x = GENDER, y = ENGLISH)) +\n  geom_boxplot(fill = \"lightblue\") +\n  ggtitle(\"Boxplot of English Scores by Gender\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam_data, aes(x = GENDER, y = ENGLISH)) +\n  geom_violin(fill = \"plum\") +\n  ggtitle(\"Violin Plot of English Scores by Gender\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam_data, aes(x = GENDER, y = ENGLISH)) +\n  geom_boxplot(notch = TRUE, fill = \"lightcoral\") +\n  ggtitle(\"Notched Boxplot of English Scores by Gender\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam_data, aes(x = GENDER, y = ENGLISH)) +\n  geom_dotplot(binaxis = 'y', stackdir = 'center', dotsize = 0.7) +\n  ggtitle(\"Dot Plot of English Scores by Gender\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nlibrary(ggdist)\n\nggplot(exam_data, aes(x = GENDER, y = ENGLISH, fill = GENDER)) +\n  stat_halfeye(adjust = .5, width = .6, .width = 0, justification = -.2) +\n  geom_boxplot(width = .1, outlier.shape = NA, alpha = 0.5) +\n  geom_jitter(width = .05, alpha = 0.3) +\n  ggtitle(\"Raincloud Plot: English Scores by Gender\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nexam_data &lt;- exam_data %&gt;%\n  mutate(SCORE_LEVEL = ifelse(ENGLISH &gt;= mean(ENGLISH), \"Above\", \"Below\"))\n\nggplot(exam_data, aes(x = GENDER, fill = SCORE_LEVEL)) +\n  geom_bar(position = \"fill\") +\n  coord_flip() +\n  ggtitle(\"Diverging Stacked Bar: English Score Level by Gender\") +\n  scale_fill_manual(values = c(\"Above\" = \"skyblue\", \"Below\" = \"salmon\"))",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on Exercise6",
    "section": "",
    "text": "By the end of this hands-on exercise we will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a slopegraph\nplotting a horizon chart\n\n\n\n\nWrite a code chunk to check, install and launch the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse.\n\npacman::p_load(scales, viridis, lubridate, ggthemes,\n               gridExtra, readxl, knitr, data.table,\n               CGPfunctions, ggHoriPlot, tidyverse)\n\n\n\n\nIn this section, we will learn how to plot a calender heatmap programmatically by using ggplot2 package.\nBy the end of this section, will be able to:\n\nplot a calender heatmap by using ggplot2 functions and extension,\nto write function using R programming,\nto derive specific date and time related field by using base R and lubridate packages\nto perform data preparation task by using tidyr and dplyr packages.\n\n\n\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\n\nFirst, you will use the code chunk below to import eventlog.csv file into R environment and called the data frame as attacks.\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\n\n\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\ntz field stores time zone of the source IP address.\n\n\n\n\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\n\n\n\n\n\n\nNote\n\n\n\n\nymd_hms() and hour() are from lubridate package, and\nweekdays() is a base R function.\n\n\n\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n\n\n\n\n\n\nNote\n\n\n\nBeside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\n\n\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\n\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk\n\n\n\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data.\n\n\n\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks.\n\n\n\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\n\n\n\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, you will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n放图\n\n\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\n\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))\n\n\n\n\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)\n\n\n\n\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\n\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")\n\n\n\n\n\nIn this section you will learn how to plot a slopegraph by using R.\nBefore getting start, make sure that CGPfunctions has been installed and loaded onto R environment. Then, refer to Using newggslopegraph to learn more about the function. Lastly, read more about newggslopegraph() and its arguments by referring to this link.\n\n\nImport the rice data set into R environment by using the code chunk below.\n\nrice &lt;- read_csv(\"data/rice.csv\")\n\n\n\n\nNext, code chunk below will be used to plot a basic slopegraph as shown below.\n\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Dr. Kam Tin Seong\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above\n\n\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 6"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#learning-outcome",
    "title": "Hands-on Exercise6",
    "section": "",
    "text": "By the end of this hands-on exercise we will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a slopegraph\nplotting a horizon chart",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 6"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "title": "Hands-on Exercise6",
    "section": "",
    "text": "Write a code chunk to check, install and launch the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse.\n\npacman::p_load(scales, viridis, lubridate, ggthemes,\n               gridExtra, readxl, knitr, data.table,\n               CGPfunctions, ggHoriPlot, tidyverse)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 6"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-calendar-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-calendar-heatmap",
    "title": "Hands-on Exercise6",
    "section": "",
    "text": "In this section, we will learn how to plot a calender heatmap programmatically by using ggplot2 package.\nBy the end of this section, will be able to:\n\nplot a calender heatmap by using ggplot2 functions and extension,\nto write function using R programming,\nto derive specific date and time related field by using base R and lubridate packages\nto perform data preparation task by using tidyr and dplyr packages.\n\n\n\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\n\nFirst, you will use the code chunk below to import eventlog.csv file into R environment and called the data frame as attacks.\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\n\n\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\ntz field stores time zone of the source IP address.\n\n\n\n\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\n\n\n\n\n\n\nNote\n\n\n\n\nymd_hms() and hour() are from lubridate package, and\nweekdays() is a base R function.\n\n\n\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n\n\n\n\n\n\nNote\n\n\n\nBeside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\n\n\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\n\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk\n\n\n\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data.\n\n\n\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks.\n\n\n\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\n\n\n\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 6"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-cycle-plot",
    "title": "Hands-on Exercise6",
    "section": "",
    "text": "In this section, you will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n放图\n\n\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\n\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))\n\n\n\n\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)\n\n\n\n\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\n\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 6"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-slopegraph",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-slopegraph",
    "title": "Hands-on Exercise6",
    "section": "",
    "text": "In this section you will learn how to plot a slopegraph by using R.\nBefore getting start, make sure that CGPfunctions has been installed and loaded onto R environment. Then, refer to Using newggslopegraph to learn more about the function. Lastly, read more about newggslopegraph() and its arguments by referring to this link.\n\n\nImport the rice data set into R environment by using the code chunk below.\n\nrice &lt;- read_csv(\"data/rice.csv\")\n\n\n\n\nNext, code chunk below will be used to plot a basic slopegraph as shown below.\n\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Dr. Kam Tin Seong\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above\n\n\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 6"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications.In this website, you will find my coursework prepared for this course.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/In-class_Ex4.html",
    "href": "In-class_Ex/In-class_Ex4/In-class_Ex4.html",
    "title": "In-class Ex4",
    "section": "",
    "text": "The ggstatsplot package offers a convenient way to generate various types of plots by adjusting a few parameters.\nBasic plots are effective for exploratory analysis and initial insights, whereas statistically enriched plots are valuable for drawing conclusions and supporting scientific reasoning.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\nTwo-sample mean test: ggbetweenstats()\nFor example changing the type from\nnp : This one is showing median.\np : This will show mean value.\nr : This plot has remove the outliers.\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"p\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"r\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you need show the statistic information,it would better advise to use ggstatsplot instead of ggplot2.\n\n\nThe difference between marginal = FALSE and marginal = TRUE\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = TRUE,\n  )\n\n\n\n\n\n\n\n\nCompare to what we learn from DAL mosaic plot and the plot belowed:\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)\n\n\n\n\n\n\n\n\nThe one can reflect the insights for Significant Test of Association within the target group"
  }
]