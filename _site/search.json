[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "In this chapter, we will learn the basic principles and essential components of ggplot2. At the same time, we will gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By then end of this chapter we will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk on the right assumes that you already have pacman package installed. If not, please go ahead install pacman first.\n\n\n\npacman::p_load(tidyverse,ggplot2,dplyr,qcc)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\n\n\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nAs you can see that the code chunk is relatively simple if R Graphics is used.\n\n\n\n\n\n\nTip\n\n\n\nKey Advantages of ggplot2 for Beginners: As pointed out by Hadley Wickham\n\nAutomatic Legends:\n\nggplot2 automatically generates legends based on aesthetics, saving beginners from manually coding them (as required in base R).\nEasy Faceting:\n\nggplot2 simplifies the creation of subplots using facet_wrap() or facet_grid(), whereas base R requires complex loops and layout setup.\nEncourages Tidy Data:\n\nWorking with ggplot2 promotes the use of tidy data, which aligns with good practices in R and integrates well with tools like dplyr and lm().\nBetter Visuals by Default:\n\nggplot2 produces cleaner, more visually appealing plots with minimal effort, making it more accessible for beginners.\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.\n\n\n\n\n\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\n\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.\n\n\n\n\n\nLet us call the ggplot() function using the code chunk on the right.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify()\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nggplot includes the x-axis and the axis’s label.\n\n\n\n\n\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\n\n\n\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\n\n\n\n\n::: Be warned The y scale is not very useful, in fact it is very misleading. :::\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\nNote that the default bin is 30.\n\n\n\n\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n1.7.6 Geometric Objects: geom-density()\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\n\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\n\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n\ngeom_point() is especially useful for creating scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nThe default method used is loess.\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale\n\n\n\n\n\nSingapore2017 &lt;- read_csv(\"data/Singapore-2017.csv\")\n\nRows: 21 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Age\ndbl (2): M, F\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\nShow the code\ndf_long &lt;- Singapore2017 %&gt;%\n  pivot_longer(cols = c(\"M\", \"F\"), names_to = \"Gender\", values_to = \"Count\") %&gt;%\n  mutate(Gender = recode(Gender, \"M\" = \"Male\", \"F\" = \"Female\"))\n\ntotal_population &lt;- sum(df_long$Count)\n\ndf_long &lt;- df_long %&gt;%\n  mutate(Percent = Count / total_population * 100,\n         Percent = ifelse(Gender == \"Male\", -Percent, Percent))\n\ndf_long$Age &lt;- factor(df_long$Age,\n                      levels = unique(Singapore2017$Age)) \n\nggplot(df_long, aes(x = Age, y = Percent, fill = Gender)) +\n  geom_bar(stat = \"identity\", width = 0.9) +\n  coord_flip() +\n  scale_y_continuous(labels = function(x) paste0(abs(x), \"%\")) +\n  scale_fill_manual(values = c(\"Male\" = \"steelblue\", \"Female\" = \"lightcoral\")) +\n  labs(title = \"Singapore Population Pyramid (2017)\",\n       x = \"Age Group\", y = \"Population (%)\") +\n  theme_minimal() +\n  theme(legend.position = \"top\",\n        plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ndefects &lt;- c(\n  shrink = 67,\n  porosity = 13,\n  weld_LOF = 9,\n  shell_inclusion = 6,\n  hard_alpha_inclusion = 3,\n  tungsten_inclusion = 1\n)\n\ndf &lt;- data.frame(\n  defect = names(defects),\n  freq = as.numeric(defects)\n) %&gt;%\n  arrange(desc(freq)) %&gt;%\n  mutate(\n    cum_freq = cumsum(freq),\n    cum_percent = cum_freq / sum(freq) * 100,\n    defect = factor(defect, levels = defect)  # 控制 x 轴顺序\n  )\n\n\nggplot(df, aes(x = defect, y = freq)) +\n  geom_col(fill = \"tomato\") +\n  geom_line(aes(y = cum_percent * max(freq) / 100), group = 1, color = \"steelblue\", size = 1) +\n  geom_point(aes(y = cum_percent * max(freq) / 100), color = \"steelblue\", size = 2) +\n  scale_y_continuous(\n    name = \"Defect Frequency\",\n    sec.axis = sec_axis(~ . * 100 / max(df$freq), name = \"Cumulative Percentage (%)\")\n  ) +\n  labs(\n    title = \"Pareto Chart of Titanium Defects\",\n    x = \"Defect Type\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.title.y.right = element_text(color = \"steelblue\"),\n    axis.text.x = element_text(angle = 45, hjust = 1)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nexam_long &lt;- exam_data %&gt;%\n  pivot_longer(cols = c(ENGLISH, MATHS, SCIENCE),\n               names_to = \"Subject\",\n               values_to = \"Score\")\n\nggplot(exam_long, aes(x = Score, fill = Subject)) +\n  geom_histogram(bins = 20, color = \"black\", alpha = 0.7) +\n  facet_wrap(~ Subject, scales = \"free\") +\n  labs(title = \"Trellis Display: Score Distribution by Subject\") +\n  theme_minimal()",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcome",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "In this chapter, we will learn the basic principles and essential components of ggplot2. At the same time, we will gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By then end of this chapter we will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics.",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Note\n\n\n\nThe code chunk on the right assumes that you already have pacman package installed. If not, please go ahead install pacman first.\n\n\n\npacman::p_load(tidyverse,ggplot2,dplyr,qcc)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "R Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nAs you can see that the code chunk is relatively simple if R Graphics is used.\n\n\n\n\n\n\nTip\n\n\n\nKey Advantages of ggplot2 for Beginners: As pointed out by Hadley Wickham\n\nAutomatic Legends:\n\nggplot2 automatically generates legends based on aesthetics, saving beginners from manually coding them (as required in base R).\nEasy Faceting:\n\nggplot2 simplifies the creation of subplots using facet_wrap() or facet_grid(), whereas base R requires complex loops and layout setup.\nEncourages Tidy Data:\n\nWorking with ggplot2 promotes the use of tidy data, which aligns with good practices in R and integrates well with tools like dplyr and lm().\nBetter Visuals by Default:\n\nggplot2 produces cleaner, more visually appealing plots with minimal effort, making it more accessible for beginners.\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "There are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\n\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Let us call the ggplot() function using the code chunk on the right.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify()",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#aesthetic-mappings",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "ggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nggplot includes the x-axis and the axis’s label.",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Geometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\n\n\n\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\n\n\n\n\n::: Be warned The y scale is not very useful, in fact it is very misleading. :::\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\nNote that the default bin is 30.\n\n\n\n\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n1.7.6 Geometric Objects: geom-density()\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\n\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\n\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n\ngeom_point() is especially useful for creating scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "ggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nThe default method used is loess.\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "ggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "ggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "ggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Hadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#statistical-graphics-methods-week-1",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#statistical-graphics-methods-week-1",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Singapore2017 &lt;- read_csv(\"data/Singapore-2017.csv\")\n\nRows: 21 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Age\ndbl (2): M, F\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\nShow the code\ndf_long &lt;- Singapore2017 %&gt;%\n  pivot_longer(cols = c(\"M\", \"F\"), names_to = \"Gender\", values_to = \"Count\") %&gt;%\n  mutate(Gender = recode(Gender, \"M\" = \"Male\", \"F\" = \"Female\"))\n\ntotal_population &lt;- sum(df_long$Count)\n\ndf_long &lt;- df_long %&gt;%\n  mutate(Percent = Count / total_population * 100,\n         Percent = ifelse(Gender == \"Male\", -Percent, Percent))\n\ndf_long$Age &lt;- factor(df_long$Age,\n                      levels = unique(Singapore2017$Age)) \n\nggplot(df_long, aes(x = Age, y = Percent, fill = Gender)) +\n  geom_bar(stat = \"identity\", width = 0.9) +\n  coord_flip() +\n  scale_y_continuous(labels = function(x) paste0(abs(x), \"%\")) +\n  scale_fill_manual(values = c(\"Male\" = \"steelblue\", \"Female\" = \"lightcoral\")) +\n  labs(title = \"Singapore Population Pyramid (2017)\",\n       x = \"Age Group\", y = \"Population (%)\") +\n  theme_minimal() +\n  theme(legend.position = \"top\",\n        plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ndefects &lt;- c(\n  shrink = 67,\n  porosity = 13,\n  weld_LOF = 9,\n  shell_inclusion = 6,\n  hard_alpha_inclusion = 3,\n  tungsten_inclusion = 1\n)\n\ndf &lt;- data.frame(\n  defect = names(defects),\n  freq = as.numeric(defects)\n) %&gt;%\n  arrange(desc(freq)) %&gt;%\n  mutate(\n    cum_freq = cumsum(freq),\n    cum_percent = cum_freq / sum(freq) * 100,\n    defect = factor(defect, levels = defect)  # 控制 x 轴顺序\n  )\n\n\nggplot(df, aes(x = defect, y = freq)) +\n  geom_col(fill = \"tomato\") +\n  geom_line(aes(y = cum_percent * max(freq) / 100), group = 1, color = \"steelblue\", size = 1) +\n  geom_point(aes(y = cum_percent * max(freq) / 100), color = \"steelblue\", size = 2) +\n  scale_y_continuous(\n    name = \"Defect Frequency\",\n    sec.axis = sec_axis(~ . * 100 / max(df$freq), name = \"Cumulative Percentage (%)\")\n  ) +\n  labs(\n    title = \"Pareto Chart of Titanium Defects\",\n    x = \"Defect Type\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.title.y.right = element_text(color = \"steelblue\"),\n    axis.text.x = element_text(angle = 45, hjust = 1)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nexam_long &lt;- exam_data %&gt;%\n  pivot_longer(cols = c(ENGLISH, MATHS, SCIENCE),\n               names_to = \"Subject\",\n               values_to = \"Score\")\n\nggplot(exam_long, aes(x = Score, fill = Subject)) +\n  geom_histogram(bins = 20, color = \"black\", alpha = 0.7) +\n  facet_wrap(~ Subject, scales = \"free\") +\n  labs(title = \"Trellis Display: Score Distribution by Subject\") +\n  theme_minimal()",
    "crumbs": [
      "Home",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.\n\n\n\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, ggplot2,\n               patchwork,DT, tidyverse) \n\n\n\n\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\",show_col_types = FALSE)\n\n\n\n\nggiraph  is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides.\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\n\n\n\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:red; #&lt;&lt;\nfont-style:bold; color:white;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\nNotice that the background colour of the tooltip is red and the font colour is white and bold.\n\n\n\n\n\n\n\n\n\n1.Change the color of tooltip_css(use_fill = TRUE)\n2.Add the Hover Interaction to (primary = “yellow”, secondary = “red”)\n3.Set tooltip will be fixed(argument use_cursor_pos is set to FALSE )\n4.Activate zoom\n\n\nShow the code\ntooltip_css &lt;- \"background-color:black; \nfont-style:bold; color:white;\"\n\ncss_default_hover &lt;- girafe_css_bicolor(primary = \"yellow\", secondary = \"red\")\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS , fill = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID,data_id = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 0.5, \n    dotsize = 3,\n    method = \"histodot\",\n    color = NA) +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL) +\n  scale_fill_viridis_c() +\n  theme_minimal()+\n  xlim(min(exam_data$MATHS) - 1, max(exam_data$MATHS) + 1)\n  \ngirafe(                                  \n  ggobj = p + scale_color_viridis_c() ,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(\n  opts_hover(css = css_default_hover),\n  opts_tooltip(\n  use_fill = TRUE,\n  offx = 50,\n  offy = 50, \n  use_cursor_pos = FALSE),\n  opts_zoom(min = 1, max = 4),\n  opts_sizing(rescale = TRUE),\n  opts_toolbar(saveaspng = FALSE, position = \"bottom\", delay_mouseout = 5000)\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo enable hover interaction, we need to include a data_id mapping in geom_dotplot_interactive().\n\n\n\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, linewidth = 0.2\n\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                          \n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe reason that a large orange highlight when interacting is because data_id = CLASS will bind all students in the same class into the same interaction group\n\n\n\n\n\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)      \n\n\n\n\n\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.\n\n\n\n\n\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.\n\n\n\n\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, x = ~ENGLISH, y = ~MATHS, color = ~RACE)\n\nInteractive:\n\nClick on the colour symbol at the legend.\n\n\n\n\n\n\n\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\n\n\n\n\n\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below is used to implement the coordinated brushing shown above.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\n\n\n\n\n\n\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3A"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#learning-outcome",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#learning-outcome",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3A"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#getting-started",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#getting-started",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "First, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, ggplot2,\n               patchwork,DT, tidyverse)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3A"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#importing-data",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#importing-data",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "In this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\",show_col_types = FALSE)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3A"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "ggiraph  is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides.\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3A"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#interactivity",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#interactivity",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "By hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3A"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#interactivity-1",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#interactivity-1",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "By hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\n\n\n\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:red; #&lt;&lt;\nfont-style:bold; color:white;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\nNotice that the background colour of the tooltip is red and the font colour is white and bold.\n\n\n\n\n\n\n\n\n\n1.Change the color of tooltip_css(use_fill = TRUE)\n2.Add the Hover Interaction to (primary = “yellow”, secondary = “red”)\n3.Set tooltip will be fixed(argument use_cursor_pos is set to FALSE )\n4.Activate zoom\n\n\nShow the code\ntooltip_css &lt;- \"background-color:black; \nfont-style:bold; color:white;\"\n\ncss_default_hover &lt;- girafe_css_bicolor(primary = \"yellow\", secondary = \"red\")\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS , fill = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID,data_id = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 0.5, \n    dotsize = 3,\n    method = \"histodot\",\n    color = NA) +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL) +\n  scale_fill_viridis_c() +\n  theme_minimal()+\n  xlim(min(exam_data$MATHS) - 1, max(exam_data$MATHS) + 1)\n  \ngirafe(                                  \n  ggobj = p + scale_color_viridis_c() ,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(\n  opts_hover(css = css_default_hover),\n  opts_tooltip(\n  use_fill = TRUE,\n  offx = 50,\n  offy = 50, \n  use_cursor_pos = FALSE),\n  opts_zoom(min = 1, max = 4),\n  opts_sizing(rescale = TRUE),\n  opts_toolbar(saveaspng = FALSE, position = \"bottom\", delay_mouseout = 5000)\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo enable hover interaction, we need to include a data_id mapping in geom_dotplot_interactive().\n\n\n\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, linewidth = 0.2\n\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                          \n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe reason that a large orange highlight when interacting is because data_id = CLASS will bind all students in the same class into the same interaction group\n\n\n\n\n\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)      \n\n\n\n\n\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.\n\n\n\n\n\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3A"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "Plotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, x = ~ENGLISH, y = ~MATHS, color = ~RACE)\n\nInteractive:\n\nClick on the colour symbol at the legend.\n\n\n\n\n\n\n\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3A"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "Crosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below is used to implement the coordinated brushing shown above.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3A"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#reference",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03A.html#reference",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "This link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3A"
    ]
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "A local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.",
    "crumbs": [
      "Home",
      "Take-home Exercise"
    ]
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#the-scene",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#the-scene",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "A local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.",
    "crumbs": [
      "Home",
      "Take-home Exercise"
    ]
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#objectives",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#objectives",
    "title": "Take Home Exercise 1",
    "section": "Objectives",
    "text": "Objectives\nAssuming the role of the graphical editor of the media company, we are tasked to prepare at most three data visualisation for the article.",
    "crumbs": [
      "Home",
      "Take-home Exercise"
    ]
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#data-acquisition",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#data-acquisition",
    "title": "Take Home Exercise 1",
    "section": "Data Acquisition",
    "text": "Data Acquisition\nSingapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 A csv file from Department of Statistics, Singapore (DOS)",
    "crumbs": [
      "Home",
      "Take-home Exercise"
    ]
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#getting-start",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#getting-start",
    "title": "Take Home Exercise 1",
    "section": "Getting start",
    "text": "Getting start\n\nInstalling and Loading R packages\nIn this project,we are going to use the packages as below:\n\ntidyverse – A collection of R packages for data science, including tools for data wrangling and visualization.\nggplot2 – A grammar-based system for creating elegant and complex graphics in R.\ndplyr – A package for fast, intuitive data manipulation using verbs like filter, mutate, and summarise.\nqcc – Tools for statistical quality control charts such as control charts and capability analysis.\npatchwork – Helps combine multiple ggplot2 plots into one graphic layout easily.\ntreemapify – Allows creation of treemaps using ggplot2 syntax to visualize part-to-whole relationships.\nggridges – Enables ridge plots (joyplots) to show distributions across categories.\nggdist – Extends ggplot2 to visualize distributions, uncertainty, and intervals.\nforcats – Simplifies working with categorical (factor) variables in R.\nviridis – Provides colorblind-friendly and perceptually uniform color palettes for plots.\nscales – Formats plot axis labels, legends, and color scales (e.g., commas, percentages).\n\n\npacman::p_load(tidyverse,ggplot2,dplyr,qcc,patchwork,treemapify,ggridges,ggdist,forcats,viridis,scales)",
    "crumbs": [
      "Home",
      "Take-home Exercise"
    ]
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#data-wrangling",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#data-wrangling",
    "title": "Take Home Exercise 1",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\n1.Importing Data\n\nS_data &lt;- read_csv(\"data/respopagesex2024.csv\",show_col_types = FALSE)\n\n\n\n2.Data information\n\npurrr::map_chr(S_data, typeof)\n\n         PA          SZ         Age         Sex         Pop        Time \n\"character\" \"character\" \"character\" \"character\"    \"double\"    \"double\" \n\n\n\n\n\nColumn Headers\nHeaders Info\nData Type\n\n\n\n\nPA\nPlanning Area\nCharacter\n\n\nSZ\nSubzone\nCharacter\n\n\nAge\nSingle Year of Age\nCharacter\n\n\nSex\nSex\nCharacter\n\n\nPop\nResident Count\nDouble\n\n\nTime\nTime/Period\nDouble\n\n\n\n\n\n3.Checking for Missing Values\n\nS_data %&gt;%\n  summarise(across(everything(), ~ sum(is.na(.))))\n\n# A tibble: 1 × 6\n     PA    SZ   Age   Sex   Pop  Time\n  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1     0     0     0     0     0     0\n\n\nAs shown from the result,the dataset S_data is clean in terms of missing data — there are no NA values in any of the columns.\n\n\n4.Checking for Duplicates\nThe first one returns the number of duplicated rows, while the second one helps you view the actual duplicated rows in the dataset.\n\n# Check if there are exact duplicate rows\nS_data %&gt;%\n  duplicated() %&gt;%\n  sum()\n\n[1] 0\n\n# View specific rows that are repeated\nS_data %&gt;%\n  filter(duplicated(.))\n\n# A tibble: 0 × 6\n# ℹ 6 variables: PA &lt;chr&gt;, SZ &lt;chr&gt;, Age &lt;chr&gt;, Sex &lt;chr&gt;, Pop &lt;dbl&gt;,\n#   Time &lt;dbl&gt;\n\n\nThe dataset S_data contains no exact duplicate rows. All records are unique.\n\n\n5.Binning Numerical Variables\n\nAge: The age variable is divided into 19 categories, spanning from 0 to 90+ years old , with 4-year intervals (e.g., 0-4, 5-9, 10-14, etc.).\n\n\nunique(S_data$Age)\n\n [1] \"0\"           \"1\"           \"2\"           \"3\"           \"4\"          \n [6] \"5\"           \"6\"           \"7\"           \"8\"           \"9\"          \n[11] \"10\"          \"11\"          \"12\"          \"13\"          \"14\"         \n[16] \"15\"          \"16\"          \"17\"          \"18\"          \"19\"         \n[21] \"20\"          \"21\"          \"22\"          \"23\"          \"24\"         \n[26] \"25\"          \"26\"          \"27\"          \"28\"          \"29\"         \n[31] \"30\"          \"31\"          \"32\"          \"33\"          \"34\"         \n[36] \"35\"          \"36\"          \"37\"          \"38\"          \"39\"         \n[41] \"40\"          \"41\"          \"42\"          \"43\"          \"44\"         \n[46] \"45\"          \"46\"          \"47\"          \"48\"          \"49\"         \n[51] \"50\"          \"51\"          \"52\"          \"53\"          \"54\"         \n[56] \"55\"          \"56\"          \"57\"          \"58\"          \"59\"         \n[61] \"60\"          \"61\"          \"62\"          \"63\"          \"64\"         \n[66] \"65\"          \"66\"          \"67\"          \"68\"          \"69\"         \n[71] \"70\"          \"71\"          \"72\"          \"73\"          \"74\"         \n[76] \"75\"          \"76\"          \"77\"          \"78\"          \"79\"         \n[81] \"80\"          \"81\"          \"82\"          \"83\"          \"84\"         \n[86] \"85\"          \"86\"          \"87\"          \"88\"          \"89\"         \n[91] \"90_and_Over\"\n\n\nAs seen in the value “90_and_Over”,We need to change it into Numeric for better bin and Create Age_group 19 bins\n\n\nCode of Binning Numerical Variables\nS_data &lt;- S_data %&gt;%\n  mutate(\n    Age = as.character(Age),                            \n    Age_num = suppressWarnings(as.numeric(Age)),        \n    Age_Group = case_when(\n      Age == \"90_and_Over\"              ~ \"90_and_Over\",\n      Age_num &gt;= 0  & Age_num &lt;= 4      ~ \"0-4\",\n      Age_num &gt;= 5  & Age_num &lt;= 9      ~ \"5-9\",\n      Age_num &gt;= 10 & Age_num &lt;= 14     ~ \"10-14\",\n      Age_num &gt;= 15 & Age_num &lt;= 19     ~ \"15-19\",\n      Age_num &gt;= 20 & Age_num &lt;= 24     ~ \"20-24\",\n      Age_num &gt;= 25 & Age_num &lt;= 29     ~ \"25-29\",\n      Age_num &gt;= 30 & Age_num &lt;= 34     ~ \"30-34\",\n      Age_num &gt;= 35 & Age_num &lt;= 39     ~ \"35-39\",\n      Age_num &gt;= 40 & Age_num &lt;= 44     ~ \"40-44\",\n      Age_num &gt;= 45 & Age_num &lt;= 49     ~ \"45-49\",\n      Age_num &gt;= 50 & Age_num &lt;= 54     ~ \"50-54\",\n      Age_num &gt;= 55 & Age_num &lt;= 59     ~ \"55-59\",\n      Age_num &gt;= 60 & Age_num &lt;= 64     ~ \"60-64\",\n      Age_num &gt;= 65 & Age_num &lt;= 69     ~ \"65-69\",\n      Age_num &gt;= 70 & Age_num &lt;= 74     ~ \"70-74\",\n      Age_num &gt;= 75 & Age_num &lt;= 79     ~ \"75-79\",\n      Age_num &gt;= 80 & Age_num &lt;= 84     ~ \"80-84\",\n      Age_num &gt;= 85 & Age_num &lt;= 89     ~ \"85-89\",\n      TRUE ~ NA_character_\n    )\n  )\n\n\n\n\n6.Data preparation\n6.1Data preparation for Region :\n\nMapping Planning Area (PA) to Region: A reference table is manually constructed to assign each Planning Area to one of Singapore’s five broad Regions (e.g., North, East). This enables aggregation and comparison at the regional level.\nExpanding Data and Merging Region Info:\nThe dataset is expanded using uncount() to generate one row per individual based on the population count (Pop). Then, left_join() integrates the region information into the dataset. This transformation facilitates detailed demographic breakdowns by Region, Age, and Gender in subsequent analysis and plots.\n\n\n\nData preparation for Region\nregion_map &lt;- tibble::tibble(\n  PA = c(\n    \"Ang Mo Kio\", \"Bedok\", \"Bishan\", \"Bukit Batok\", \"Bukit Merah\",\n    \"Bukit Panjang\", \"Bukit Timah\", \"Central Water Catchment\", \"Changi\",\n    \"Choa Chu Kang\", \"Clementi\", \"Downtown Core\", \"Geylang\", \"Hougang\",\n    \"Jurong East\", \"Jurong West\", \"Kallang\", \"Mandai\", \"Marine Parade\",\n    \"Novena\", \"Orchard\", \"Outram\", \"Pasir Ris\", \"Punggol\", \"Queenstown\",\n    \"River Valley\", \"Rochor\", \"Sembawang\", \"Sengkang\", \"Serangoon\",\n    \"Simpang\", \"Tampines\", \"Tanglin\", \"Tengah\", \"Toa Payoh\", \"Tuas\",\n    \"Western Islands\", \"Western Water Catchment\", \"Woodlands\", \"Yishun\",\n    \"Seletar\", \"Southern Islands\", \"Singapore River\", \"Museum\", \"Newton\",\n    \"Straits View\", \"Sungei Kadut\", \"North-Eastern Islands\", \"Marina East\",\n    \"Marina South\"\n  ),\n  Region = c(\n    \"North\", \"East\", \"North\", \"West\", \"South\",\n    \"West\", \"South\", \"South\", \"East\",\n    \"West\", \"West\", \"South\", \"South\", \"North\",\n    \"West\", \"West\", \"South\", \"North\", \"East\",\n    \"South\", \"South\", \"South\", \"East\", \"East\", \"South\",\n    \"South\", \"South\", \"North\", \"East\", \"East\",\n    \"North\", \"East\", \"South\", \"West\", \"South\", \"West\",\n    \"West\", \"West\", \"North\", \"North\",\n    \"East\", \"South\", \"South\", \"South\", \"South\",\n    \"South\", \"North\", \"East\", \"East\", \"East\"\n  )\n)\n\n# Step 2: Merge Region into S_data\ndf_long_region &lt;- S_data %&gt;%\n  uncount(weights = Pop) %&gt;%\n  left_join(region_map, by = \"PA\")\n\n\n6.2 Data preparation for Age :\n\nGroup by Age Group and Sex: Aggregates population counts (Pop) to get total individuals for each combination of age group and gender.\nCalculate Gender-wise Percentage: Within each gender group, computes what proportion each age group represents as a percentage.\nCreate Plot-ready Columns:\n\nPop_plot: Multiplies male values by -1 to align them to the left in a population pyramid.\nPerc_plot: Same logic, but for percentage values.\nLabel_pop and Label_perc: Format population and percentage for cleaner label display in the plot.\n\nSet Age Group Factor Levels:\nEnsures age groups are ordered from youngest to oldest in the vertical axis of the pyramid.1.\nDefine Age Group Order:\nOriginal Age_Group classification and Manually define a logical order for Age_Group using factor(levels = ...) to ensure the y-axis in the plot appears from youngest to oldest.\n\n\n\nData preparation for Age\npyramid_data &lt;- S_data %&gt;%\n  group_by(Age_Group, Sex) %&gt;%\n  summarise(Population = sum(Pop), .groups = \"drop\") %&gt;%\n  group_by(Sex) %&gt;%\n  mutate(Percentage = Population / sum(Population) * 100) %&gt;%\n  mutate(\n    Pop_plot = ifelse(Sex == \"Males\", -Population, Population),\n    Perc_plot = ifelse(Sex == \"Males\", -Percentage, Percentage),\n    Label_pop = format(Population, big.mark = \",\"),  \n    Label_perc = paste0(round(Percentage, 1), \"%\")\n  )\n\nage_levels &lt;- c(\n  \"0-4\", \"5-9\", \"10-14\", \"15-19\", \"20-24\", \"25-29\",\n  \"30-34\", \"35-39\", \"40-44\", \"45-49\", \"50-54\", \"55-59\",\n  \"60-64\", \"65-69\", \"70-74\", \"75-79\", \"80-84\", \"85-89\", \"90_and_Over\"\n)\npyramid_data$Age_Group &lt;- factor(pyramid_data$Age_Group, levels = age_levels)\n\n#Keep original Age_Group classification and use factor to manually sort\nage_levels &lt;- c(\n  \"0-4\", \"5-9\", \"10-14\", \"15-19\", \"20-24\", \"25-29\",\n  \"30-34\", \"35-39\", \"40-44\", \"45-49\", \"50-54\", \"55-59\",\n  \"60-64\", \"65-69\", \"70-74\", \"75-79\", \"80-84\", \"85-89\", \"90_and_Over\"\n)\n\n\n6.3 Data preparation for desnsity:\n\nStandardize the Age Variable：\nConvert the Age variable into numeric format. The \"90_and_Over\" label is replaced with the numeric value 90 to allow proper statistical calculations (e.g., mean, density).\nExpand the Data by Population Count：\nTransform the dataset so each row represents one individual, replicating rows according to the Pop column (population count). This makes it suitable for density estimation.\nCompute Density Peaks and Median\nFor each gender:\nEstimate a density curve over age.\nIdentify the peak point (the age with the highest density) and Median point.\nStore the peak age and corresponding density value for annotation.\n\n\n\nData preparation for desnsity\n# Step 1: Clean the Age data with data type transformation\nS_data &lt;- S_data %&gt;%\n  mutate(Age = ifelse(Age == \"90_and_Over\", \"90\", Age),\n         Age_numeric = as.numeric(Age))\n\n# Step 2: Expand to \"one row per person\"\nS_long &lt;- S_data %&gt;%\n  uncount(weights = Pop)\n\n# Step 3: Average age (mean)\navg_age &lt;- S_long %&gt;%\n  group_by(Sex) %&gt;%\n  summarise(mean_age = mean(Age_numeric))\n\n# Step 4: Density peak + y-coordinate adjustments for vertical separation\ndensity_peaks &lt;- S_long %&gt;%\n  group_by(Sex) %&gt;%\n  summarise(\n    peak_age = density(Age_numeric)$x[which.max(density(Age_numeric)$y)],\n    peak_density = max(density(Age_numeric)$y)\n  ) %&gt;%\n  mutate(\n    label_text = paste0(Sex, \": \", round(peak_age, 1)),\n    label_y = peak_density + ifelse(Sex == \"Males\", 0.0006, 0.0009)  # ⬅️ 分开高度\n  )\n\n# Step 5: Prepare mean_labels for bottom annotation\nmean_labels &lt;- avg_age %&gt;%\n  mutate(\n    label_text = paste0(round(mean_age, 1)),\n    label_y = 0.001,  \n    label_x = ifelse(Sex == \"Males\", mean_age - 8, mean_age + 5)  # 左右错开\n  )\n\n#Step 4 : Median caculation\nmedian_age &lt;- median(df_long_region$Age, na.rm = TRUE)\ndf_median &lt;- data.frame(Median = median_age)\n\ndf_region_gender &lt;- df_long_region %&gt;%\n  filter(!is.na(Sex), !is.na(Region)) %&gt;%\n  group_by(Region, Sex) %&gt;%\n  summarise(n = n(), .groups = \"drop\")\n\n\n6.4 Data preparation for Interaction between Region × Age Group × Gender:\n2.Group Data by Region, Age Group, and Gender\n\nUse group_by(Region, Age_Group, Sex) and summarise() to count the number of individuals (Pop) in each subgroup.\n\n3.Convert to Wide Format\n\nUse pivot_wider() to restructure the data so that each row contains counts of both Males and Females, facilitating ratio calculation.\nFill missing values with 0 to avoid calculation errors.\n\n4.Calculate Female-to-Male Ratio\n\nCreate a new variable SexRatio = Females / Males.\n\n\n\nData preparation for Heatmap\ndf_sex_ratio &lt;- df_long_region %&gt;%\n  filter(!is.na(Sex), !is.na(Age_Group)) %&gt;%\n  mutate(Age_Group = factor(Age_Group, levels = age_levels)) \n\n# Count the number of people in each Region + AgeGroup + Sex\ndf_grouped &lt;- df_sex_ratio %&gt;%\n  group_by(Region, Age_Group, Sex) %&gt;%\n  summarise(Pop = n(), .groups = \"drop\")\n\n# Convert to wide format, one line contains the number of female / male\ndf_wide &lt;- df_grouped %&gt;%\n  pivot_wider(names_from = Sex, values_from = Pop, values_fill = 0)\n\n# Calculating Female-to-Male Ratios\ndf_wide &lt;- df_wide %&gt;%\n  mutate(SexRatio = Females / ifelse(Males == 0, NA, Males))",
    "crumbs": [
      "Home",
      "Take-home Exercise"
    ]
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#data-analysis",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#data-analysis",
    "title": "Take Home Exercise 1",
    "section": "Data Analysis",
    "text": "Data Analysis\n\nI.Exploration of Singapore Population and Age Distribution by Gender (2024)\n1.1 Population pyramid using gender and age group information from S_data.And it shows the structural proportion of each group\n\n\nPopulation pyramid\nP1 &lt;- ggplot(pyramid_data, aes(x = Age_Group, y = Perc_plot, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.8) +\n  \n  geom_text(aes(y = ifelse(Sex == \"Males\", Perc_plot - 0.6, Perc_plot + 0.6), \n                label = Label_perc),\n            size = 3, color = \"black\") +\n\n  scale_y_continuous(\n    limits = c(-10, 10),\n    breaks = seq(-10, 10, 2),\n    labels = function(x) paste0(abs(x), \"%\")\n  ) +\n\n  coord_flip() +\n  labs(title = \"Population Pyramid (2024)\",\n       x = \"Age Group\",\n       y = \"Population (%)\") +\n  scale_fill_manual(values = c(\"Males\" = \"#91C4F2\", \"Females\" = \"#F4B183\")) +\n  theme_minimal() +\n  theme(\n    axis.text = element_text(color = \"black\", face = \"bold\"),\n    axis.title = element_text(color = \"black\", face = \"plain\"),\n    plot.title.position = \"plot\",\n    \n  )\n\n\n1.2 Density Plot highlights where the population is most concentrated\n\n\nDensity Plot\n# Step 6: Plot\nP2 &lt;- ggplot(S_long, aes(x = Age_numeric, fill = Sex, color = Sex)) +\n  geom_density(alpha = 0.4, size = 1) +\n\n  # Vertical dashed mean line\n  geom_vline(data = avg_age, aes(xintercept = mean_age, color = Sex),\n             linetype = \"dashed\", size = 1) +\n\n  # Mean text near bottom\n  geom_text(data = mean_labels,\n            aes(x = label_x, y = label_y, label = label_text),\n            size = 4, color = \"black\", hjust = 0.2) +\n\n  # Peak text near top, vertically spaced\n  geom_text(data = density_peaks,\n            aes(x = peak_age, y = label_y, label = label_text),\n            size = 4, color = \"black\") +\n\n  labs(\n    title = \"Age Density by Gender (with Mean & Peak)\",\n    x = \"Age (Years)\",\n    y = \"Density\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0, face = \"bold\"),\n    plot.title.position = \"plot\",\n    axis.text = element_text(color = \"black\", face = \"bold\"),\n    legend.position = \"right\"\n  ) +\n  scale_fill_manual(values = c(\"Males\" = \"#91C4F2\", \"Females\" = \"#F4B183\")) +\n  scale_color_manual(values = c(\"Males\" = \"#91C4F2\", \"Females\" = \"#F4B183\"))\n\n\n\n\nVisualisation I\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlayout &lt;- \"\nA#\nB#\n\"\n\nP1 + P2 +\n  plot_layout(design = layout) +\n  plot_annotation(\n    title = \"Singapore Population Structure and Age Distribution by Gender (2024)\",\n    theme = theme(plot.title = element_text(hjust = 0.5, face = \"bold\",size = 16))\n  )\n\n\n\n\n\n\nKey Observations & Insights\n\n\nThe largest population share is in the 30–54 age groups for both genders.\nThe base of the pyramid (ages 0–19) is narrower, indicating lower birth rates in recent years.\nBeyond age 65, the number of females exceeds males significantly.\nThe oldest age groups (especially 85+) are mostly female.\nThe density plot shows peaks around age 34–35 for both genders.\nMean age is slightly higher for females (34.7) than males (34.3).\nThe female curve extends further right, suggesting longer life expectancy.\n\nThese visualisations collectively reflect a maturing demographic structure. The dominance of the working-age population (30–54) suggests current economic stability, but the shrinking young cohort (0–19) raises concerns about future workforce replacement. The clear rise in elderly females implies a gendered ageing trend, pointing to disproportionate healthcare and eldercare demands on women. This has policy implications in terms of labour planning, social support systems, and retirement infrastructure. An ageing population with longer female longevity also highlights the need for gender-sensitive ageing policies and sustainable intergenerational support mechanisms.\n\n\n\nII.Exploration of Age Density Distributions Across Singapore’s Planning Areas (2024)\nThe reason why choosing Boxplot is that it highlights variations in median age and age spread and helps identify areas with younger or older populations relative to the national median,supporting demographic insights for targeted policy and planning.\n\n\nBoxplot\nP3 &lt;- ggplot(df_long_region, aes(x = PA, y = Age)) +\n  geom_boxplot(\n    fill = \"white\",\n    color = \"black\",\n    outlier.color = \"gray40\",\n    outlier.size = 1,\n    width = 0.6,\n    alpha = 0.9\n  ) +\n  geom_hline(\n    data = df_median,\n    aes(yintercept = Median, color = \"Median\"),\n    linetype = \"dashed\",\n    size = 0.8,\n    show.legend = TRUE\n  ) +\n  scale_color_manual(\n    name = NULL,\n    values = c(\"Median\" = \"red\"),\n    labels = c(\"Median\" = paste0(\"Median = \", median_age))\n  ) +\n  facet_wrap(~ Region, scales = \"free_x\", ncol = 4, nrow = 1) +\n  labs(\n    title = \"Boxplot of Age Distribution by Planning Region (2024)\",\n    x = \"Planning Area\", y = \"Age\"\n  ) +\n  theme_gray(base_size = 12) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 10, hjust = 0.5),\n    axis.title = element_text(size = 11, face = \"bold\"),\n    axis.text.x = element_text(size = 10, angle = 45, hjust = 1, face = \"bold\"),\n    axis.text.y = element_text(size = 10),\n    legend.position = \"bottom\",\n    legend.text = element_text(size = 12)\n  )\n\n\nThe reason why choosing Ridgeline density plot with ECDF shading is that it can highlight where population age is most concentrated and emphasizes core age groups within each area.\n\n\nDensity Distributions Plot\nP4&lt;-ggplot(df_long_region, aes(x = Age, y = PA, fill = 0.5 - abs(0.5 - stat(ecdf)))) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE,\n    scale = 1.2,\n    rel_min_height = 0.01,\n    alpha = 0.95,\n    from = 0 \n  ) +\n  facet_wrap(~ Region, scales = \"free\", ncol = 4) +\n  scale_fill_viridis_c(\n    option = \"D\", direction = -1,\n    name = \"0.5 - |0.5 - ECDF|-Density emphasis on the core age group in each planning area\",\n    guide = guide_colorbar(\n      title.position = \"top\", \n      title.hjust = 0.5, \n      barwidth = 20,   \n      barheight = 0.8\n    )\n  ) +\n  labs(\n    title = \"Age Density Distributions Across Singapore's Planning Areas (2024)\",\n    x = \"Age\", y = \"Planning Area\"\n  ) +\n  theme_minimal(base_size = 11) +\n  theme(\n  plot.title = element_text(face = \"bold\", size = 16, hjust = 0.5),\n  axis.text.y = element_text(size = 12, face = \"bold\"),  \n  axis.text.x = element_text(size = 12, face = \"bold\"),  \n  axis.title.y = element_text(size = 13, face = \"bold\"), \n  axis.title.x = element_text(size = 13, face = \"bold\"), \n  strip.text = element_text(face = \"bold\", size = 11),\n  legend.position = \"bottom\",\n  legend.box.margin = margin(t = 3),\n  legend.title = element_text(size = 9, face = \"bold\"),\n  legend.text = element_text(size = 12)\n  )\n\n\n\n\nVisualisation II\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nP4 / P3 \n\n\n\n\n\n\nKey Observations & Insights\n\n\nAge distributions in Seletar and Bukit Timah are skewed toward older age groups, with density curves leaning to the right.\nNewer planning areas like Tengah and Punggol show younger age profiles, with left-skewed density curves and lower median ages in the boxplots.\nMost planning areas have median ages between 35 and 50, with the red dashed line (median = 42) intersecting many boxplots.\nThe South region has many planning areas with highly varied age distributions and numerous outliers.\nThe intensity of the density plot’s shading highlights age concentration levels, with some areas showing clear peaks around core age groups.\n\nThese visualisations reveal distinct demographic differences between older and newer planning areas. New towns like Punggol and Tengah attract a younger population, reflecting family-oriented migration and urban development, while mature estates such as Seletar and Orchard show a concentration of older residents—indicating housing stability and long-term settlement. The overall median age centers around 42, underscoring Singapore’s twin demographic challenges: an ageing population and declining birth rates. The spatial disparity in age structure calls for region-specific resource planning—particularly in childcare, healthcare, and transport. Notably, ageing districts may require targeted investments in elder-friendly infrastructure and services to address future demands effectively.\n\n\n\nIII.Exploration of Population Structure and Gender Distribution Across Singapore’s Planning Areas (2024)\nStacked plots ：To provide a clear overview of the total population breakdown by gender (Males vs. Females) across Singapore’s four regions (East, North, South, West)\n\n\nStacked plots\ndf_region_gender &lt;- df_long_region %&gt;%\n  filter(!is.na(Sex), !is.na(Region)) %&gt;%\n  group_by(Region, Sex) %&gt;%\n  summarise(n = n(), .groups = \"drop\")\n\nP5 &lt;- ggplot(df_region_gender, aes(x = Region, y = n, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.5, alpha = 0.85) +  \n\n  geom_text(\n    aes(label = comma(n)),\n    position = position_stack(vjust = 0.5),  \n    size = 4,\n    color = \"white\",\n    fontface = \"bold\"\n  ) +\n\n  labs(\n    title = \"Total Population by Region and Gender\",\n    x = \"Region\",\n    y = \"Population\"\n  ) +\n  scale_y_continuous(labels = comma, expand = expansion(mult = c(0, 0.05))) +\n  scale_fill_manual(values = c(\"Males\" = \"#4575b4\", \"Females\" = \"#d73027\")) +  # 更浅颜色\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0, face = \"plain\", size = 14, margin = margin(b = 15)),\n    axis.title = element_text(face = \"plain\"),\n    axis.text = element_text(size = 11),\n    legend.title = element_blank(),\n    legend.position = \"bottom\"\n  )\n\n\nThe reason why choosing Heatmap is that it can identify gender imbalances and demographic aging patterns across Singapore.The color gradient can show whether there are more women than men (red) or vice versa (blue) across age groups and regions.\n\n\nHeatmap\n# Step 5: Draw a heat map\nP6&lt;-ggplot(df_wide, aes(x = Region, y = fct_rev(Age_Group), fill = SexRatio)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient2(\n    low = \"#4575b4\", mid = \"white\", high = \"#d73027\", midpoint = 1,\n    name = \"F/M Ratio\",\n    limits = c(0.5, 1.5),\n    na.value = \"grey70\"\n  ) +\n  labs(\n    title = \"Gender Ratio Heatmap by Age Group and Region (F/M)\",\n    x = \"Region\",\n    y = \"Age Group\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0, face = \"plain\"),\n    axis.title = element_text(face = \"plain\"),\n    axis.text = element_text(size = 11),\n    legend.title = element_text(face = \"plain\"),\n    legend.position = \"bottom\"\n  )\n\n\n\n\nVisualisation III\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(P5 + P6) +\n  plot_annotation(\n    title = \"Population Structure and Gender Distribution Across Regions (2024)\",\n    theme = theme(\n      plot.title = element_text(size = 17, face = \"bold\", hjust = 0.5)\n    ))\n\n\n\n\n\n\nKey Observations & Insights\n\n\nEast Region has the highest population for both males and females.\nFemale counts exceed male counts in all four regions.\nSouth Region has the smallest total population among the four.\nAge groups 30–54 show near parity in the F/M ratio across all regions.\nOlder age groups (75–89), especially in the West, show a higher female-to-male ratio (&gt;1.25).\nYounger age groups (0–24) tend to show balanced or male-skewed ratios (&lt;1).\n\nThese visualisations reveal Singapore’s ageing population structure, with women outliving men especially in the older age brackets. The stacked bar chart highlights female dominance in total population counts, while the heatmap deepens the picture, showing where gender imbalances become more pronounced with age. This dual perspective underscores the need for gender-sensitive ageing policies, such as healthcare and community support tailored for older women, particularly in regions like the West where the female-to-male ratio peaks in the elderly segment.",
    "crumbs": [
      "Home",
      "Take-home Exercise"
    ]
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#conclusion",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html#conclusion",
    "title": "Take Home Exercise 1",
    "section": "Conclusion",
    "text": "Conclusion\nThese visualisations provide a comprehensive overview of Singapore’s evolving demographic landscape. They reveal a society characterised by a dominant working-age population, a steadily ageing citizen base, and notable gender disparities in longevity. While younger cohorts are shrinking—particularly in newer towns like Punggol and Tengah—the elderly population is expanding, especially among women in mature estates and western regions. The rising median age and widening spatial age gaps underscore the urgency of tailored policy interventions. These include region-specific investments in eldercare, healthcare, and childcare infrastructure, alongside broader strategies to support intergenerational cohesion and economic sustainability. Singapore’s demographic trajectory calls for integrated planning that is both age- and gender-responsive, ensuring resilience amid shifting population dynamics.",
    "crumbs": [
      "Home",
      "Take-home Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03B.html",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03B.html",
    "title": "Hands-on Exercise3B",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, we will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, we will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.\n\n\n\n\n\n\n\n\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"chap03/data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\n\n\n\n\n\n\n\n\n\n\n\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp\n\n\n\n\n\n\n\n\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3B"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03B.html#overview",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03B.html#overview",
    "title": "Hands-on Exercise3B",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, we will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, we will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3B"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03B.html#getting-started",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03B.html#getting-started",
    "title": "Hands-on Exercise3B",
    "section": "",
    "text": "First, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"chap03/data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3B"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03B.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03B.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on Exercise3B",
    "section": "",
    "text": "gganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3B"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03B.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03B.html#animated-data-visualisation-plotly",
    "title": "Hands-on Exercise3B",
    "section": "",
    "text": "In Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3B"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03B.html#reference",
    "href": "Hands-on_Ex/Hands_on_Ex03/Hands-on_Ex03B.html#reference",
    "title": "Hands-on Exercise3B",
    "section": "",
    "text": "Getting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 3B"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "In this chapter, we will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, we will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package.\n\n\n\n\n\n\nIn this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse,grid,ggdist,\n               gridExtra,ggplot2) \n\n\n\n\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data &lt;- read_csv(\"Exam_data.csv\",show_col_types = FALSE)\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n\n\n\n\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_label_repel()\ngeom_label()\n\n\n\n\nAutomatically Avoid Overlap\nYes\nNo (labels may overlap)\n\n\nFont Style\nBold (fontface = \"bold\")\nDefault font\n\n\nLabel Position\nAutomatically calculated optimal position\nFixed position (centered horizontally, slightly above)\n\n\nAdaptability to Dense Points\nStrong\nWeak\n\n\nRequired Package\nRequires loading ggrepel package\nNo extra package required\n\n\n\n\n\n\n\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\nShow the code\nlibrary(ggplot2)\nlibrary(gridExtra)\n\nbase_plot &lt;- function(theme_func, title_text) {\n  ggplot(data = exam_data, aes(x = MATHS)) +\n    geom_histogram(bins = 20, boundary = 100, color = \"grey25\", fill = \"grey90\") +\n    theme_func() +\n    ggtitle(title_text)\n}\n\np1 &lt;- base_plot(theme_bw,        \"theme_bw()\")\np2 &lt;- base_plot(theme_classic,   \"theme_classic()\")\np3 &lt;- base_plot(theme_dark,      \"theme_dark()\")\np4 &lt;- base_plot(theme_light,     \"theme_light()\")\np5 &lt;- base_plot(theme_linedraw,  \"theme_linedraw()\")\np6 &lt;- base_plot(theme_minimal,   \"theme_minimal()\")\np7 &lt;- base_plot(theme_void,      \"theme_void()\")\n\ngrid.arrange(p1, p2, p3,\n             p4, p5, p6,\n             p7, nullGrob(), nullGrob(),\n             ncol = 3)\n\n\n\n\n\n\n\n\n\n\n\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhat can we learn from the code chunk above?\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines.\n\n\n\n\n\n\n\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, we will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\nNext\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\np2\n\n\n\n\nLastly, we will draw a scatterplot for English score versus Maths score by as shown below\n\n\nShow the code\np3 &lt;- ggplot(data=exam_data,\n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\") +\n  theme(plot.title = element_text(size = 11))\np3\n\n\n\n\n\n\n\n\n\n\n\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\n\nShow the code\np1 + p2\n\n\n\n\n\n\n\n\n\n\n\n\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\n\np1 + gt::gt(exam_data[1:10,  c(\"ID\", \"ENGLISH\", \"MATHS\")])\n\n\n\n\n\n\n\n\n\n\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\nChange the plot to the right bottom:\n\n\nShow the code\np3 + inset_element(p2, \n                   left = 0.5,   \n                   bottom = 0,    \n                   right = 0.98,  \n                   top = 0.3)     \n\n\n\n\n\n\n\n\n\n\n\n\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n\n\n\n\n\n\n\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam_data, aes(x = GENDER, y = ENGLISH)) +\n  geom_boxplot(fill = \"lightblue\") +\n  ggtitle(\"Boxplot of English Scores by Gender\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam_data, aes(x = GENDER, y = ENGLISH)) +\n  geom_violin(fill = \"plum\") +\n  ggtitle(\"Violin Plot of English Scores by Gender\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam_data, aes(x = GENDER, y = ENGLISH)) +\n  geom_boxplot(notch = TRUE, fill = \"lightcoral\") +\n  ggtitle(\"Notched Boxplot of English Scores by Gender\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam_data, aes(x = GENDER, y = ENGLISH)) +\n  geom_dotplot(binaxis = 'y', stackdir = 'center', dotsize = 0.7) +\n  ggtitle(\"Dot Plot of English Scores by Gender\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nlibrary(ggdist)\n\nggplot(exam_data, aes(x = GENDER, y = ENGLISH, fill = GENDER)) +\n  stat_halfeye(adjust = .5, width = .6, .width = 0, justification = -.2) +\n  geom_boxplot(width = .1, outlier.shape = NA, alpha = 0.5) +\n  geom_jitter(width = .05, alpha = 0.3) +\n  ggtitle(\"Raincloud Plot: English Scores by Gender\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nexam_data &lt;- exam_data %&gt;%\n  mutate(SCORE_LEVEL = ifelse(ENGLISH &gt;= mean(ENGLISH), \"Above\", \"Below\"))\n\nggplot(exam_data, aes(x = GENDER, fill = SCORE_LEVEL)) +\n  geom_bar(position = \"fill\") +\n  coord_flip() +\n  ggtitle(\"Diverging Stacked Bar: English Score Level by Gender\") +\n  scale_fill_manual(values = c(\"Above\" = \"skyblue\", \"Below\" = \"salmon\"))",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "In this chapter, we will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, we will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "In this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse,grid,ggdist,\n               gridExtra,ggplot2) \n\n\n\n\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data &lt;- read_csv(\"Exam_data.csv\",show_col_types = FALSE)\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "One of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_label_repel()\ngeom_label()\n\n\n\n\nAutomatically Avoid Overlap\nYes\nNo (labels may overlap)\n\n\nFont Style\nBold (fontface = \"bold\")\nDefault font\n\n\nLabel Position\nAutomatically calculated optimal position\nFixed position (centered horizontally, slightly above)\n\n\nAdaptability to Dense Points\nStrong\nWeak\n\n\nRequired Package\nRequires loading ggrepel package\nNo extra package required",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "ggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\")",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#other-theme-examples",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#other-theme-examples",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "Show the code\nlibrary(ggplot2)\nlibrary(gridExtra)\n\nbase_plot &lt;- function(theme_func, title_text) {\n  ggplot(data = exam_data, aes(x = MATHS)) +\n    geom_histogram(bins = 20, boundary = 100, color = \"grey25\", fill = \"grey90\") +\n    theme_func() +\n    ggtitle(title_text)\n}\n\np1 &lt;- base_plot(theme_bw,        \"theme_bw()\")\np2 &lt;- base_plot(theme_classic,   \"theme_classic()\")\np3 &lt;- base_plot(theme_dark,      \"theme_dark()\")\np4 &lt;- base_plot(theme_light,     \"theme_light()\")\np5 &lt;- base_plot(theme_linedraw,  \"theme_linedraw()\")\np6 &lt;- base_plot(theme_minimal,   \"theme_minimal()\")\np7 &lt;- base_plot(theme_void,      \"theme_void()\")\n\ngrid.arrange(p1, p2, p3,\n             p4, p5, p6,\n             p7, nullGrob(), nullGrob(),\n             ncol = 3)\n\n\n\n\n\n\n\n\n\n\n\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhat can we learn from the code chunk above?\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "It is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, we will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\nNext\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\np2\n\n\n\n\nLastly, we will draw a scatterplot for English score versus Maths score by as shown below\n\n\nShow the code\np3 &lt;- ggplot(data=exam_data,\n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\") +\n  theme(plot.title = element_text(size = 11))\np3\n\n\n\n\n\n\n\n\n\n\n\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\n\nShow the code\np1 + p2\n\n\n\n\n\n\n\n\n\n\n\n\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#adding-table",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#adding-table",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "p1 + gt::gt(exam_data[1:10,  c(\"ID\", \"ENGLISH\", \"MATHS\")])\n\n\n\n\n\n\n\n\n\n\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\nChange the plot to the right bottom:\n\n\nShow the code\np3 + inset_element(p2, \n                   left = 0.5,   \n                   bottom = 0,    \n                   right = 0.98,  \n                   top = 0.3)     \n\n\n\n\n\n\n\n\n\n\n\n\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "Patchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#visual-analytics-methods-of-the-week-2",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#visual-analytics-methods-of-the-week-2",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "Show the code\nggplot(exam_data, aes(x = GENDER, y = ENGLISH)) +\n  geom_boxplot(fill = \"lightblue\") +\n  ggtitle(\"Boxplot of English Scores by Gender\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam_data, aes(x = GENDER, y = ENGLISH)) +\n  geom_violin(fill = \"plum\") +\n  ggtitle(\"Violin Plot of English Scores by Gender\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam_data, aes(x = GENDER, y = ENGLISH)) +\n  geom_boxplot(notch = TRUE, fill = \"lightcoral\") +\n  ggtitle(\"Notched Boxplot of English Scores by Gender\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam_data, aes(x = GENDER, y = ENGLISH)) +\n  geom_dotplot(binaxis = 'y', stackdir = 'center', dotsize = 0.7) +\n  ggtitle(\"Dot Plot of English Scores by Gender\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nlibrary(ggdist)\n\nggplot(exam_data, aes(x = GENDER, y = ENGLISH, fill = GENDER)) +\n  stat_halfeye(adjust = .5, width = .6, .width = 0, justification = -.2) +\n  geom_boxplot(width = .1, outlier.shape = NA, alpha = 0.5) +\n  geom_jitter(width = .05, alpha = 0.3) +\n  ggtitle(\"Raincloud Plot: English Scores by Gender\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nexam_data &lt;- exam_data %&gt;%\n  mutate(SCORE_LEVEL = ifelse(ENGLISH &gt;= mean(ENGLISH), \"Above\", \"Below\"))\n\nggplot(exam_data, aes(x = GENDER, fill = SCORE_LEVEL)) +\n  geom_bar(position = \"fill\") +\n  coord_flip() +\n  ggtitle(\"Diverging Stacked Bar: English Score Level by Gender\") +\n  scale_fill_manual(values = c(\"Above\" = \"skyblue\", \"Below\" = \"salmon\"))",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications.In this website, you will find my coursework prepared for this course.",
    "crumbs": [
      "Home"
    ]
  }
]