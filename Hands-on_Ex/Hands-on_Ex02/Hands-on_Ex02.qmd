---
title: "Hands-on Exercise 2"
author: "yang yayong"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  message: false
  freeze: true
---

# 2  Beyond ggplot2 Fundamentals

## 2.1 Overview

In this chapter, we will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, we will be able to:

-   control the placement of annotation on a graph by using functions provided in ggrepel package,

-   create professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,

-   plot composite figure by combining ggplot2 graphs by using patchwork package.

## 2.2 Getting started

### 2.2.1 Installing and loading the required libraries

In this exercise, beside tidyverse, four R packages will be used. They are:

-   ggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.

-   ggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.

-   hrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.

-   patchwork: an R package for preparing composite figure created using ggplot2.

Code chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.

```{r}
pacman::p_load(ggrepel, patchwork, 
               ggthemes, hrbrthemes,
               tidyverse,grid,ggdist,
               gridExtra,ggplot2) 
```

### 2.2.2 Importing data

For the purpose of this exercise, a data file called *Exam_data* will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.

The code chunk below imports *exam_data.csv* into R environment by using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) function of [**readr**](https://readr.tidyverse.org/) package. **readr** is one of the tidyverse package.

```{r}
exam_data <- read_csv("Exam_data.csv")
```

There are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.

-   The categorical attributes are: ID, CLASS, GENDER and RACE.

-   The continuous attributes are: MATHS, ENGLISH and SCIENCE.

## 2.3 Beyond ggplot2 Annotation: ggrepel

One of the challenge in plotting statistical graph is annotation, especially with large number of data points.

::: panel-tabset
## The plot

```{r echo=FALSE,warning=FALSE}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label(aes(label = ID), 
             hjust = .5, 
             vjust = -.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

## The code

```{r eval=FALSE}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label(aes(label = ID), 
             hjust = .5, 
             vjust = -.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```
:::

### 2.3.1 Working with ggrepel

::: panel-tabset
## The plot

```{r echo=FALSE,warning=FALSE }
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label_repel(aes(label = ID), 
                   fontface = "bold") +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")

```

## The code

```{r eval=FALSE}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label_repel(aes(label = ID), 
                   fontface = "bold") +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```
:::

Comparison summary

|   | geom_label_repel() | geom_label() |
|:-------------------:|:------------------------:|:------------------------:|
| Automatically Avoid Overlap | Yes | No (labels may overlap) |
| Font Style | Bold (`fontface = "bold"`) | Default font |
| Label Position | Automatically calculated optimal position | Fixed position (centered horizontally, slightly above) |
| Adaptability to Dense Points | Strong | Weak |
| Required Package | Requires loading `ggrepel` package | No extra package required |

## 2.4 Beyond ggplot2 Themes

ggplot2 comes with eight [built-in themes](https://ggplot2.tidyverse.org/reference/ggtheme.html), they are: `theme_gray()`, `theme_bw()`, `theme_classic()`, `theme_dark()`, `theme_light()`, `theme_linedraw()`, `theme_minimal()`, and `theme_void()`.

::: panel-tabset
## The plot

```{r echo=FALSE}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_gray() +
  ggtitle("Distribution of Maths scores") 

```

## The code

```{r eval=FALSE}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_gray() +
  ggtitle("Distribution of Maths scores") 
```
:::

## Other theme examples

```{r}
#| code-fold: true
#| code-summary: "Show the code"
library(ggplot2)
library(gridExtra)

base_plot <- function(theme_func, title_text) {
  ggplot(data = exam_data, aes(x = MATHS)) +
    geom_histogram(bins = 20, boundary = 100, color = "grey25", fill = "grey90") +
    theme_func() +
    ggtitle(title_text)
}

p1 <- base_plot(theme_bw,        "theme_bw()")
p2 <- base_plot(theme_classic,   "theme_classic()")
p3 <- base_plot(theme_dark,      "theme_dark()")
p4 <- base_plot(theme_light,     "theme_light()")
p5 <- base_plot(theme_linedraw,  "theme_linedraw()")
p6 <- base_plot(theme_minimal,   "theme_minimal()")
p7 <- base_plot(theme_void,      "theme_void()")

grid.arrange(p1, p2, p3,
             p4, p5, p6,
             p7, nullGrob(), nullGrob(),
             ncol = 3)

```

### 2.4.1 Working with ggtheme package

[**ggthemes**](https://cran.r-project.org/web/packages/ggthemes/index.html) provides [‘ggplot2’ themes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) that replicate the look of plots by Edward Tufte, Stephen Few, [Fivethirtyeight](https://fivethirtyeight.com/), [The Economist](https://www.economist.com/graphic-detail), ‘Stata’, ‘Excel’, and [The Wall Street Journal](https://www.pinterest.com/wsjgraphics/wsj-graphics/), among others.

::: panel-tabset
## The plot

```{r echo=FALSE}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_economist()
```

## The code

```{r eval=FALSE}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_economist()
```
:::

### 2.4.2 Working with hrbthems package

[**hrbrthemes**](https://cran.r-project.org/web/packages/hrbrthemes/index.html) package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.

::: panel-tabset
## The plot

```{r echo=FALSE}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum()

```

## The code

```{r eval=FALSE}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum()
```
:::

The second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult [this vignette](https://hrbrmstr.github.io/hrbrthemes/articles/why_hrbrthemes.html) to learn more.

::: panel-tabset
## The plot

```{r echo=FALSE}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum(axis_title_size = 18,
              base_size = 15,
              grid = "Y")
```

## The code

```{r eval=FALSE}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum(axis_title_size = 18,
              base_size = 15,
              grid = "Y")
```
:::

::: callout-note
**What can we learn from the code chunk above?**

-   `axis_title_size` argument is used to increase the font size of the axis title to 18,

-   `base_size` argument is used to increase the default axis label to 15, and

-   `grid` argument is used to remove the x-axis grid lines.
:::

## 2.5 Beyond Single Graph

It is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, we will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.

::: panel-tabset
## The plot

```{r echo=FALSE}
p1 <- ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores")
p1
```

## The code

```{r eval=FALSE}
p1 <- ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores")
```
:::

Next

::: panel-tabset
## The plot

```{r echo=FALSE}
p2 <- ggplot(data=exam_data, 
             aes(x = ENGLISH)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of English scores")

p2
```

## The code

```{r eval=FALSE}
p2 <- ggplot(data=exam_data, 
             aes(x = ENGLISH)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of English scores")

```
:::

Lastly, we will draw a scatterplot for English score versus Maths score by as shown below

```{r}
#| code-fold: true
#| code-summary: "Show the code"
p3 <- ggplot(data=exam_data, 
             aes(x= MATHS, 
                 y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
p3
```

### 2.5.1 Creating Composite Graphics: pathwork methods

There are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as [`grid.arrange()`](https://cran.r-project.org/web/packages/gridExtra/vignettes/arrangeGrob.html) of **gridExtra** package and [`plot_grid()`](https://wilkelab.org/cowplot/reference/plot_grid.html) of [**cowplot**](https://wilkelab.org/cowplot/index.html) package. In this section, I am going to shared with you an ggplot2 extension called [**patchwork**](https://patchwork.data-imaginist.com/) which is specially designed for combining separate ggplot2 graphs into a single figure.

Patchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:

-   Two-Column Layout using the Plus Sign +.

-   Parenthesis () to create a subplot group.

-   Two-Row Layout using the Division Sign `/`

### 2.5.2 Combining two ggplot2 graphs

Figure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!

```{r}
#| code-fold: true
#| code-summary: "Show the code"
p1 + p2
```

### 2.5.3 Combining three ggplot2 graphs

We can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:

-   “/” operator to stack two ggplot2 graphs,

-   “\|” operator to place the plots beside each other,

-   “()” operator the define the sequence of the plotting.

::: panel-tabset
## The plot

```{r echo=FALSE}
(p1 / p2) | p3
```

## The code

```{r eval=FALSE}
(p1 / p2) | p3
```
:::

## Adding table

```{r}
p1 + gt::gt(exam_data[1:10,  c("ID", "ENGLISH", "MATHS")])
```

### 2.5.4 Creating a composite figure with tag

In order to identify subplots in text, **patchwork** also provides auto-tagging capabilities as shown in the figure below.

::: panel-tabset
## The plot

```{r echo=FALSE}
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = 'I')
```

## The code

```{r eval=FALSE}
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = 'I')
```
:::

### 2.5.5 Creating figure with insert

Beside providing functions to place plots next to each other based on the provided layout. With [`inset_element()`](https://patchwork.data-imaginist.com/reference/inset_element.html) of **patchwork**, we can place one or several plots or graphic elements freely on top or below another plot.

::: panel-tabset
## The plot

```{r echo=FALSE}
p3 + inset_element(p2, 
                   left = 0.02, 
                   bottom = 0.7, 
                   right = 0.5, 
                   top = 1)
```

## The code

```{r eval=FALSE}
p3 + inset_element(p2, 
                   left = 0.02, 
                   bottom = 0.7, 
                   right = 0.5, 
                   top = 1)
```
:::

### 2.5.6 Creating a composite figure by using patchwork and ggtheme

Figure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.

::: panel-tabset
## The plot

```{r echo=FALSE}
patchwork <- (p1 / p2) | p3
patchwork & theme_economist()
```

## The code

```{r eval=FALSE}
patchwork <- (p1 / p2) | p3
patchwork & theme_economist()
```
:::

## 2.6 Reference

-   [Patchwork R package goes nerd viral](https://www.littlemissdata.com/blog/patchwork)

-   [ggrepel](https://ggrepel.slowkow.com/)

-   [ggthemes](https://ggplot2.tidyverse.org/reference/ggtheme.html)

-   [hrbrthemes](https://cinc.rud.is/web/packages/hrbrthemes/)

-   [ggplot tips: Arranging plots](https://albert-rapp.de/post/2021-10-28-extend-plot-variety/)

-   [ggplot2 Theme Elements Demonstration](https://henrywang.nl/ggplot2-theme-elements-demonstration/)

-   [ggplot2 Theme Elements Reference Sheet](https://isabella-b.com/blog/ggplot2-theme-elements-reference/)

## Visual Analytics Method(s) of the Week 2 

### Boxplot

```{r}
#| code-fold: true
#| code-summary: "Show the code"
ggplot(exam_data, aes(x = GENDER, y = ENGLISH)) +
  geom_boxplot(fill = "lightblue") +
  ggtitle("Boxplot of English Scores by Gender")
```

### Violin Plot (distribution + density)

```{r}
#| code-fold: true
#| code-summary: "Show the code"
ggplot(exam_data, aes(x = GENDER, y = ENGLISH)) +
  geom_violin(fill = "plum") +
  ggtitle("Violin Plot of English Scores by Gender")

```

### Notched Boxplot (median comparison)

```{r}
#| code-fold: true
#| code-summary: "Show the code"
ggplot(exam_data, aes(x = GENDER, y = ENGLISH)) +
  geom_boxplot(notch = TRUE, fill = "lightcoral") +
  ggtitle("Notched Boxplot of English Scores by Gender")

```

### Dot Plot (jittered points to reduce overplotting)

```{r}
#| code-fold: true
#| code-summary: "Show the code"
ggplot(exam_data, aes(x = GENDER, y = ENGLISH)) +
  geom_dotplot(binaxis = 'y', stackdir = 'center', dotsize = 0.7) +
  ggtitle("Dot Plot of English Scores by Gender")
```

###  **Raincloud Plot** (combines boxplot, violin, and jittered points)

```{r}
#| code-fold: true
#| code-summary: "Show the code"
library(ggdist)

ggplot(exam_data, aes(x = GENDER, y = ENGLISH, fill = GENDER)) +
  stat_halfeye(adjust = .5, width = .6, .width = 0, justification = -.2) +
  geom_boxplot(width = .1, outlier.shape = NA, alpha = 0.5) +
  geom_jitter(width = .05, alpha = 0.3) +
  ggtitle("Raincloud Plot: English Scores by Gender") +
  theme_minimal()
```

### Packed Bar Chart (alternative to stacked bar, e.g., by race)

```{r}
#| code-fold: true
#| code-summary: "Show the code"
exam_data <- exam_data %>%
  mutate(SCORE_LEVEL = ifelse(ENGLISH >= mean(ENGLISH), "Above", "Below"))

ggplot(exam_data, aes(x = GENDER, fill = SCORE_LEVEL)) +
  geom_bar(position = "fill") +
  coord_flip() +
  ggtitle("Diverging Stacked Bar: English Score Level by Gender") +
  scale_fill_manual(values = c("Above" = "skyblue", "Below" = "salmon"))

```
